[
  {
    "path": "/v2/1-clicks",
    "method": "GET",
    "operationId": "oneClicks_list",
    "summary": "List 1-Click Applications",
    "description": "To list all available 1-Click applications, send a GET request to `/v2/1-clicks`. The `type` may\nbe provided as query paramater in order to restrict results to a certain type of 1-Click, for\nexample: `/v2/1-clicks?type=droplet`. Current supported types are `kubernetes` and `droplet`.\n\nThe response will be a JSON object with a key called `1_clicks`. This will be set to an array of\n1-Click application data, each of which will contain the the slug and type for the 1-Click.",
    "tags": [
      "1-Click Applications"
    ],
    "parameters": []
  },
  {
    "path": "/v2/1-clicks/kubernetes",
    "method": "POST",
    "operationId": "oneClicks_install_kubernetes",
    "summary": "Install Kubernetes 1-Click Applications",
    "description": "To install a Kubernetes 1-Click application on a cluster, send a POST request to\n`/v2/1-clicks/kubernetes`. The `addon_slugs` and `cluster_uuid` must be provided as body\nparameter in order to specify which 1-Click application(s) to install. To list all available\n1-Click Kubernetes applications, send a request to `/v2/1-clicks?type=kubernetes`.",
    "tags": [
      "1-Click Applications"
    ],
    "parameters": []
  },
  {
    "path": "/v2/account",
    "method": "GET",
    "operationId": "account_get",
    "summary": "Get User Information",
    "description": "To show information about the current user account, send a GET request to `/v2/account`.",
    "tags": [
      "Account"
    ],
    "parameters": []
  },
  {
    "path": "/v2/account/keys",
    "method": "GET",
    "operationId": "sshKeys_list",
    "summary": "List All SSH Keys",
    "description": "To list all of the keys in your account, send a GET request to `/v2/account/keys`. The response will be a JSON object with a key set to `ssh_keys`. The value of this will be an array of ssh_key objects, each of which contains the standard ssh_key attributes.",
    "tags": [
      "SSH Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/account/keys",
    "method": "POST",
    "operationId": "sshKeys_create",
    "summary": "Create a New SSH Key",
    "description": "To add a new SSH public key to your DigitalOcean account, send a POST request to `/v2/account/keys`. Set the `name` attribute to the name you wish to use and the `public_key` attribute to the full public key you are adding.",
    "tags": [
      "SSH Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/account/keys/{ssh_key_identifier}",
    "method": "GET",
    "operationId": "sshKeys_get",
    "summary": "Retrieve an Existing SSH Key",
    "description": "To get information about a key, send a GET request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.\nThe response will be a JSON object with the key `ssh_key` and value an ssh_key object which contains the standard ssh_key attributes.",
    "tags": [
      "SSH Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/account/keys/{ssh_key_identifier}",
    "method": "PUT",
    "operationId": "sshKeys_update",
    "summary": "Update an SSH Key's Name",
    "description": "To update the name of an SSH key, send a PUT request to either `/v2/account/keys/$SSH_KEY_ID` or `/v2/account/keys/$SSH_KEY_FINGERPRINT`. Set the `name` attribute to the new name you want to use.",
    "tags": [
      "SSH Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/account/keys/{ssh_key_identifier}",
    "method": "DELETE",
    "operationId": "sshKeys_delete",
    "summary": "Delete an SSH Key",
    "description": "To destroy a public SSH key that you have in your account, send a DELETE request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.\nA 204 status will be returned, indicating that the action was successful and that the response body is empty.",
    "tags": [
      "SSH Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/actions",
    "method": "GET",
    "operationId": "actions_list",
    "summary": "List All Actions",
    "description": "This will be the entire list of actions taken on your account, so it will be quite large. As with any large collection returned by the API, the results will be paginated with only 20 on each page by default.",
    "tags": [
      "Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/actions/{action_id}",
    "method": "GET",
    "operationId": "actions_get",
    "summary": "Retrieve an Existing Action",
    "description": "To retrieve a specific action object, send a GET request to `/v2/actions/$ACTION_ID`.",
    "tags": [
      "Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps",
    "method": "GET",
    "operationId": "apps_list",
    "summary": "List All Apps",
    "description": "List all apps on your account. Information about the current active deployment as well as any in progress ones will also be included for each app.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps",
    "method": "POST",
    "operationId": "apps_create",
    "summary": "Create a New App",
    "description": "Create a new app by submitting an app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{id}",
    "method": "DELETE",
    "operationId": "apps_delete",
    "summary": "Delete an App",
    "description": "Delete an existing app. Once deleted, all active deployments will be permanently shut down and the app deleted. If needed, be sure to back up your app specification so that you may re-create it at a later time.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{id}",
    "method": "GET",
    "operationId": "apps_get",
    "summary": "Retrieve an Existing App",
    "description": "Retrieve details about an existing app by either its ID or name. To retrieve an app by its name, do not include an ID in the request path. Information about the current active deployment as well as any in progress ones will also be included in the response.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{id}",
    "method": "PUT",
    "operationId": "apps_update",
    "summary": "Update an App",
    "description": "Update an existing app by submitting a new app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://docs.digitalocean.com/products/app-platform/reference/app-spec/).",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/restart",
    "method": "POST",
    "operationId": "apps_restart",
    "summary": "Restart an App",
    "description": "Perform a rolling restart of all or specific components in an app.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/components/{component_name}/logs",
    "method": "GET",
    "operationId": "apps_get_logs_active_deployment",
    "summary": "Retrieve Active Deployment Logs",
    "description": "Retrieve the logs of the active deployment if one exists. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment. Note log_type=BUILD logs will return logs associated with the current active deployment (being served). To view build logs associated with in-progress build, the query must explicitly reference the deployment id.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/components/{component_name}/exec",
    "method": "GET",
    "operationId": "apps_get_exec_active_deployment",
    "summary": "Retrieve Exec URL",
    "description": "Returns a websocket URL that allows sending/receiving console input and output to a component of the active deployment if one exists.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/instances",
    "method": "GET",
    "operationId": "apps_get_instances",
    "summary": "Retrieve App Instances",
    "description": "Retrieve the list of running instances for a given application, including instance names and component types. Please note that these instances are ephemeral and may change over time. It is recommended not to make persistent changes or develop scripts that rely on their persistence.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments",
    "method": "GET",
    "operationId": "apps_list_deployments",
    "summary": "List App Deployments",
    "description": "List all deployments of an app.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments",
    "method": "POST",
    "operationId": "apps_create_deployment",
    "summary": "Create an App Deployment",
    "description": "Creating an app deployment will pull the latest changes from your repository and schedule a new deployment for your app.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments/{deployment_id}",
    "method": "GET",
    "operationId": "apps_get_deployment",
    "summary": "Retrieve an App Deployment",
    "description": "Retrieve information about an app deployment.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments/{deployment_id}/cancel",
    "method": "POST",
    "operationId": "apps_cancel_deployment",
    "summary": "Cancel a Deployment",
    "description": "Immediately cancel an in-progress deployment.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments/{deployment_id}/components/{component_name}/logs",
    "method": "GET",
    "operationId": "apps_get_logs",
    "summary": "Retrieve Deployment Logs",
    "description": "Retrieve the logs of a past, in-progress, or active deployment. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments/{deployment_id}/logs",
    "method": "GET",
    "operationId": "apps_get_logs_aggregate",
    "summary": "Retrieve Aggregate Deployment Logs",
    "description": "Retrieve the logs of a past, in-progress, or active deployment. If a component name is specified, the logs will be limited to only that component. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/deployments/{deployment_id}/components/{component_name}/exec",
    "method": "GET",
    "operationId": "apps_get_exec",
    "summary": "Retrieve Exec URL for Deployment",
    "description": "Returns a websocket URL that allows sending/receiving console input and output to a component of the specified deployment if one exists. Optionally, the instance_name parameter can be provided to retrieve the exec URL for a specific instance. Note that instances are ephemeral; therefore, we recommended to avoid making persistent changes or such scripting around them.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/logs",
    "method": "GET",
    "operationId": "apps_get_logs_active_deployment_aggregate",
    "summary": "Retrieve Active Deployment Aggregate Logs",
    "description": "Retrieve the logs of the active deployment if one exists. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment. Note log_type=BUILD logs will return logs associated with the current active deployment (being served). To view build logs associated with in-progress build, the query must explicitly reference the deployment id.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/tiers/instance_sizes",
    "method": "GET",
    "operationId": "apps_list_instanceSizes",
    "summary": "List Instance Sizes",
    "description": "List all instance sizes for `service`, `worker`, and `job` components.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/tiers/instance_sizes/{slug}",
    "method": "GET",
    "operationId": "apps_get_instanceSize",
    "summary": "Retrieve an Instance Size",
    "description": "Retrieve information about a specific instance size for `service`, `worker`, and `job` components.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/regions",
    "method": "GET",
    "operationId": "apps_list_regions",
    "summary": "List App Regions",
    "description": "List all regions supported by App Platform.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/propose",
    "method": "POST",
    "operationId": "apps_validate_appSpec",
    "summary": "Propose an App Spec",
    "description": "To propose and validate a spec for a new or existing app, send a POST request to the `/v2/apps/propose` endpoint. The request returns some information about the proposed app, including app cost and upgrade cost. If an existing app ID is specified, the app spec is treated as a proposed update to the existing app.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/alerts",
    "method": "GET",
    "operationId": "apps_list_alerts",
    "summary": "List all app alerts",
    "description": "List alerts associated to the app and any components. This includes configuration information about the alerts including emails, slack webhooks, and triggering events or conditions.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/alerts/{alert_id}/destinations",
    "method": "POST",
    "operationId": "apps_assign_alertDestinations",
    "summary": "Update destinations for alerts",
    "description": "Updates the emails and slack webhook destinations for app alerts. Emails must be associated to a user with access to the app.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/rollback",
    "method": "POST",
    "operationId": "apps_create_rollback",
    "summary": "Rollback App",
    "description": "Rollback an app to a previous deployment. A new deployment will be created to perform the rollback.\nThe app will be pinned to the rollback deployment preventing any new deployments from being created,\neither manually or through Auto Deploy on Push webhooks. To resume deployments, the rollback must be\neither committed or reverted.\n\nIt is recommended to use the Validate App Rollback endpoint to double check if the rollback is\nvalid and if there are any warnings.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/rollback/validate",
    "method": "POST",
    "operationId": "apps_validate_rollback",
    "summary": "Validate App Rollback",
    "description": "Check whether an app can be rolled back to a specific deployment. This endpoint can also be used\nto check if there are any warnings or validation conditions that will cause the rollback to proceed\nunder unideal circumstances. For example, if a component must be rebuilt as part of the rollback\ncausing it to take longer than usual.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/rollback/commit",
    "method": "POST",
    "operationId": "apps_commit_rollback",
    "summary": "Commit App Rollback",
    "description": "Commit an app rollback. This action permanently applies the rollback and unpins the app to resume new deployments.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/rollback/revert",
    "method": "POST",
    "operationId": "apps_revert_rollback",
    "summary": "Revert App Rollback",
    "description": "Revert an app rollback. This action reverts the active rollback by creating a new deployment from the\nlatest app spec prior to the rollback and unpins the app to resume new deployments.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/metrics/bandwidth_daily",
    "method": "GET",
    "operationId": "apps_get_metrics_bandwidth_daily",
    "summary": "Retrieve App Daily Bandwidth Metrics",
    "description": "Retrieve daily bandwidth usage metrics for a single app.",
    "tags": [
      "Apps"
    ],
    "parameters": [
      {
        "name": "date",
        "in": "query",
        "required": false,
        "description": "Optional day to query. Only the date component of the timestamp will be considered. Default: yesterday.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/apps/metrics/bandwidth_daily",
    "method": "POST",
    "operationId": "apps_list_metrics_bandwidth_daily",
    "summary": "Retrieve Multiple Apps' Daily Bandwidth Metrics",
    "description": "Retrieve daily bandwidth usage metrics for multiple apps.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/apps/{app_id}/health",
    "method": "GET",
    "operationId": "apps_get_health",
    "summary": "Retrieve App Health",
    "description": "Retrieve information like health status, cpu and memory utilization of app components.",
    "tags": [
      "Apps"
    ],
    "parameters": []
  },
  {
    "path": "/v2/cdn/endpoints",
    "method": "GET",
    "operationId": "cdn_list_endpoints",
    "summary": "List All CDN Endpoints",
    "description": "To list all of the CDN endpoints available on your account, send a GET request to `/v2/cdn/endpoints`.",
    "tags": [
      "CDN Endpoints"
    ],
    "parameters": []
  },
  {
    "path": "/v2/cdn/endpoints",
    "method": "POST",
    "operationId": "cdn_create_endpoint",
    "summary": "Create a New CDN Endpoint",
    "description": "To create a new CDN endpoint, send a POST request to `/v2/cdn/endpoints`. The\norigin attribute must be set to the fully qualified domain name (FQDN) of a\nDigitalOcean Space. Optionally, the TTL may be configured by setting the `ttl`\nattribute.\n\nA custom subdomain may be configured by specifying the `custom_domain` and\n`certificate_id` attributes.",
    "tags": [
      "CDN Endpoints"
    ],
    "parameters": []
  },
  {
    "path": "/v2/cdn/endpoints/{cdn_id}",
    "method": "GET",
    "operationId": "cdn_get_endpoint",
    "summary": "Retrieve an Existing CDN Endpoint",
    "description": "To show information about an existing CDN endpoint, send a GET request to `/v2/cdn/endpoints/$ENDPOINT_ID`.",
    "tags": [
      "CDN Endpoints"
    ],
    "parameters": []
  },
  {
    "path": "/v2/cdn/endpoints/{cdn_id}",
    "method": "PUT",
    "operationId": "cdn_update_endpoints",
    "summary": "Update a CDN Endpoint",
    "description": "To update the TTL, certificate ID, or the FQDN of the custom subdomain for\nan existing CDN endpoint, send a PUT request to\n`/v2/cdn/endpoints/$ENDPOINT_ID`.",
    "tags": [
      "CDN Endpoints"
    ],
    "parameters": []
  },
  {
    "path": "/v2/cdn/endpoints/{cdn_id}",
    "method": "DELETE",
    "operationId": "cdn_delete_endpoint",
    "summary": "Delete a CDN Endpoint",
    "description": "To delete a specific CDN endpoint, send a DELETE request to\n`/v2/cdn/endpoints/$ENDPOINT_ID`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.",
    "tags": [
      "CDN Endpoints"
    ],
    "parameters": []
  },
  {
    "path": "/v2/cdn/endpoints/{cdn_id}/cache",
    "method": "DELETE",
    "operationId": "cdn_purge_cache",
    "summary": "Purge the Cache for an Existing CDN Endpoint",
    "description": "To purge cached content from a CDN endpoint, send a DELETE request to\n`/v2/cdn/endpoints/$ENDPOINT_ID/cache`. The body of the request should include\na `files` attribute containing a list of cached file paths to be purged. A\npath may be for a single file or may contain a wildcard (`*`) to recursively\npurge all files under a directory. When only a wildcard is provided, all cached \nfiles will be purged. There is a rate limit of 50 files per 20 seconds that can \nbe purged. CDN endpoints have a rate limit of 5 requests per 10 seconds. \nPurging files using a wildcard path counts as a single request against the API's \nrate limit. Two identical purge requests cannot be sent at the same time.",
    "tags": [
      "CDN Endpoints"
    ],
    "parameters": []
  },
  {
    "path": "/v2/certificates",
    "method": "GET",
    "operationId": "certificates_list",
    "summary": "List All Certificates",
    "description": "To list all of the certificates available on your account, send a GET request to `/v2/certificates`.",
    "tags": [
      "Certificates"
    ],
    "parameters": []
  },
  {
    "path": "/v2/certificates",
    "method": "POST",
    "operationId": "certificates_create",
    "summary": "Create a New Certificate",
    "description": "To upload new SSL certificate which you have previously generated, send a POST\nrequest to `/v2/certificates`.\n\nWhen uploading a user-generated certificate, the `private_key`,\n`leaf_certificate`, and optionally the `certificate_chain` attributes should\nbe provided. The type must be set to `custom`.\n\nWhen using Let's Encrypt to create a certificate, the `dns_names` attribute\nmust be provided, and the type must be set to `lets_encrypt`.",
    "tags": [
      "Certificates"
    ],
    "parameters": []
  },
  {
    "path": "/v2/certificates/{certificate_id}",
    "method": "GET",
    "operationId": "certificates_get",
    "summary": "Retrieve an Existing Certificate",
    "description": "To show information about an existing certificate, send a GET request to `/v2/certificates/$CERTIFICATE_ID`.",
    "tags": [
      "Certificates"
    ],
    "parameters": []
  },
  {
    "path": "/v2/certificates/{certificate_id}",
    "method": "DELETE",
    "operationId": "certificates_delete",
    "summary": "Delete a Certificate",
    "description": "To delete a specific certificate, send a DELETE request to\n`/v2/certificates/$CERTIFICATE_ID`.",
    "tags": [
      "Certificates"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/balance",
    "method": "GET",
    "operationId": "balance_get",
    "summary": "Get Customer Balance",
    "description": "To retrieve the balances on a customer's account, send a GET request to `/v2/customers/my/balance`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/billing_history",
    "method": "GET",
    "operationId": "billingHistory_list",
    "summary": "List Billing History",
    "description": "To retrieve a list of all billing history entries, send a GET request to `/v2/customers/my/billing_history`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/invoices",
    "method": "GET",
    "operationId": "invoices_list",
    "summary": "List All Invoices",
    "description": "To retrieve a list of all invoices, send a GET request to `/v2/customers/my/invoices`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/invoices/{invoice_uuid}",
    "method": "GET",
    "operationId": "invoices_get_byUUID",
    "summary": "Retrieve an Invoice by UUID",
    "description": "To retrieve the invoice items for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/invoices/{invoice_uuid}/csv",
    "method": "GET",
    "operationId": "invoices_get_csvByUUID",
    "summary": "Retrieve an Invoice CSV by UUID",
    "description": "To retrieve a CSV for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID/csv`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/invoices/{invoice_uuid}/pdf",
    "method": "GET",
    "operationId": "invoices_get_pdfByUUID",
    "summary": "Retrieve an Invoice PDF by UUID",
    "description": "To retrieve a PDF for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID/pdf`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/customers/my/invoices/{invoice_uuid}/summary",
    "method": "GET",
    "operationId": "invoices_get_summaryByUUID",
    "summary": "Retrieve an Invoice Summary by UUID",
    "description": "To retrieve a summary for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID/summary`.",
    "tags": [
      "Billing"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/options",
    "method": "GET",
    "operationId": "databases_list_options",
    "summary": "List Database Options",
    "description": "To list all of the options available for the offered database engines, send a GET request to `/v2/databases/options`.\nThe result will be a JSON object with an `options` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases",
    "method": "GET",
    "operationId": "databases_list_clusters",
    "summary": "List All Database Clusters",
    "description": "To list all of the database clusters available on your account, send a GET request to `/v2/databases`. To limit the results to database clusters with a specific tag, include the `tag_name` query parameter set to the name of the tag. For example, `/v2/databases?tag_name=$TAG_NAME`.\n\nThe result will be a JSON object with a `databases` key. This will be set to an array of database objects, each of which will contain the standard database attributes.\n\nThe embedded `connection` and `private_connection` objects will contain the information needed to access the database cluster. For multi-node clusters, the `standby_connection` and `standby_private_connection` objects will contain the information needed to connect to the cluster's standby node(s).\n\nThe embedded `maintenance_window` object will contain information about any scheduled maintenance for the database cluster.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases",
    "method": "POST",
    "operationId": "databases_create_cluster",
    "summary": "Create a New Database Cluster",
    "description": "To create a database cluster, send a POST request to `/v2/databases`. To see a list  of options for each engine, such as available regions, size slugs, and versions, send a GET request to the `/v2/databases/options` endpoint. The available sizes for  the `storage_size_mib` field depends on the cluster's size. To see a list of available sizes, see [Managed Database Pricing](https://www.digitalocean.com/pricing/managed-databases).\n\nThe create response returns a JSON object with a key called `database`. The value of this is an object that contains the standard attributes associated with a database cluster. The initial value of the database cluster's `status` attribute is `creating`. When the cluster is ready to receive traffic, this changes to `online`.\n\nThe embedded `connection` and `private_connection` objects contains the information needed to access the database cluster. For multi-node clusters, the `standby_connection` and `standby_private_connection` objects contain the information needed to connect to the cluster's standby node(s).\n\nDigitalOcean managed PostgreSQL and MySQL database clusters take automated daily backups. To create a new database cluster based on a backup of an existing cluster, send a POST request to `/v2/databases`. In addition to the standard database cluster attributes, the JSON body must include a key named `backup_restore` with the name of the original database cluster and the timestamp of the backup to be restored. Creating a database from a backup is the same as forking a database in the control panel.\nNote: Redis cluster creates are no longer supported as of 2025-04-30T00:00:00Z.  Backups are also not supported for Redis or Valkey clusters.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}",
    "method": "GET",
    "operationId": "databases_get_cluster",
    "summary": "Retrieve an Existing Database Cluster",
    "description": "To show information about an existing database cluster, send a GET request to `/v2/databases/$DATABASE_ID`.\n\nThe response will be a JSON object with a database key. This will be set to an object containing the standard database cluster attributes.\n\nThe embedded `connection` and `private_connection` objects will contain the information needed to access the database cluster. For multi-node clusters, the `standby_connection` and `standby_private_connection` objects contain the information needed to connect to the cluster's standby node(s).\n\nThe embedded maintenance_window object will contain information about any scheduled maintenance for the database cluster.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}",
    "method": "DELETE",
    "operationId": "databases_destroy_cluster",
    "summary": "Destroy a Database Cluster",
    "description": "To destroy a specific database, send a DELETE request to `/v2/databases/$DATABASE_ID`.\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/config",
    "method": "GET",
    "operationId": "databases_get_config",
    "summary": "Retrieve an Existing Database Cluster Configuration",
    "description": "Shows configuration parameters for an existing database cluster by sending a GET request to\n`/v2/databases/$DATABASE_ID/config`.\nThe response is a JSON object with a `config` key, which is set to an object\ncontaining any database configuration parameters.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/config",
    "method": "PATCH",
    "operationId": "databases_patch_config",
    "summary": "Update the Database Configuration for an Existing Database",
    "description": "To update the configuration for an existing database cluster, send a PATCH request to\n`/v2/databases/$DATABASE_ID/config`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/ca",
    "method": "GET",
    "operationId": "databases_get_ca",
    "summary": "Retrieve the Public Certificate",
    "description": "To retrieve the public certificate used to secure the connection to the database cluster send a GET request to\n`/v2/databases/$DATABASE_ID/ca`.\n\nThe response will be a JSON object with a `ca` key. This will be set to an object\ncontaining the base64 encoding of the public key certificate.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/online-migration",
    "method": "GET",
    "operationId": "databases_get_migrationStatus",
    "summary": "Retrieve the Status of an Online Migration",
    "description": "To retrieve the status of the most recent online migration, send a GET request to `/v2/databases/$DATABASE_ID/online-migration`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/online-migration",
    "method": "PUT",
    "operationId": "databases_update_onlineMigration",
    "summary": "Start an Online Migration",
    "description": "To start an online migration, send a PUT request to `/v2/databases/$DATABASE_ID/online-migration` endpoint. Migrating a cluster establishes a connection with an existing cluster and replicates its contents to the target cluster. Online migration is only available for MySQL, PostgreSQL, Redis, and Valkey clusters.\nIf the existing database is continuously being written to,  the migration process will continue for up to two weeks unless it is manually stopped. Online migration is only available for [MySQL](https://docs.digitalocean.com/products/databases/mysql/how-to/migrate/#:~:text=To%20migrate%20a%20MySQL%20database,then%20select%20Set%20Up%20Migration),  [PostgreSQL](https://docs.digitalocean.com/products/databases/postgresql/how-to/migrate/),  [Redis](https://docs.digitalocean.com/products/databases/redis/how-to/migrate/), and [Valkey](https://docs.digitalocean.com/products/databases/valkey/how-to/migrate/) clusters.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/online-migration/{migration_id}",
    "method": "DELETE",
    "operationId": "databases_delete_onlineMigration",
    "summary": "Stop an Online Migration",
    "description": "To stop an online migration, send a DELETE request to `/v2/databases/$DATABASE_ID/online-migration/$MIGRATION_ID`.\n\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/migrate",
    "method": "PUT",
    "operationId": "databases_update_region",
    "summary": "Migrate a Database Cluster to a New Region",
    "description": "To migrate a database cluster to a new region, send a `PUT` request to\n`/v2/databases/$DATABASE_ID/migrate`. The body of the request must specify a\n`region` attribute.\n\nA successful request will receive a 202 Accepted status code with no body in\nresponse. Querying the database cluster will show that its `status` attribute\nwill now be set to `migrating`. This will transition back to `online` when the\nmigration has completed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/resize",
    "method": "PUT",
    "operationId": "databases_update_clusterSize",
    "summary": "Resize a Database Cluster",
    "description": "To resize a database cluster, send a PUT request to `/v2/databases/$DATABASE_ID/resize`. The body of the request must specify both the size and num_nodes attributes.\nA successful request will receive a 202 Accepted status code with no body in response. Querying the database cluster will show that its status attribute will now be set to resizing. This will transition back to online when the resize operation has completed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/firewall",
    "method": "GET",
    "operationId": "databases_list_firewall_rules",
    "summary": "List Firewall Rules (Trusted Sources) for a Database Cluster",
    "description": "To list all of a database cluster's firewall rules (known as \"trusted sources\" in the control panel), send a GET request to `/v2/databases/$DATABASE_ID/firewall`.\nThe result will be a JSON object with a `rules` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/firewall",
    "method": "PUT",
    "operationId": "databases_update_firewall_rules",
    "summary": "Update Firewall Rules (Trusted Sources) for a Database",
    "description": "To update a database cluster's firewall rules (known as \"trusted sources\" in the control panel), send a PUT request to `/v2/databases/$DATABASE_ID/firewall` specifying which resources should be able to open connections to the database. You may limit connections to specific Droplets, Kubernetes clusters, or IP addresses. When a tag is provided, any Droplet or Kubernetes node with that tag applied to it will have access. The firewall is limited to 100 rules (or trusted sources). When possible, we recommend [placing your databases into a VPC network](https://docs.digitalocean.com/products/networking/vpc/) to limit access to them instead of using a firewall.\nA successful",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/maintenance",
    "method": "PUT",
    "operationId": "databases_update_maintenanceWindow",
    "summary": "Configure a Database Cluster's Maintenance Window",
    "description": "To configure the window when automatic maintenance should be performed for a database cluster, send a PUT request to `/v2/databases/$DATABASE_ID/maintenance`.\nA successful request will receive a 204 No Content status code with no body in response.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/install_update",
    "method": "PUT",
    "operationId": "databases_install_update",
    "summary": "Start Database Maintenance",
    "description": "To start the installation of updates for a database cluster, send a PUT request to `/v2/databases/$DATABASE_ID/install_update`.\nA successful request will receive a 204 No Content status code with no body in response.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/backups",
    "method": "GET",
    "operationId": "databases_list_backups",
    "summary": "List Backups for a Database Cluster",
    "description": "To list all of the available backups of a PostgreSQL or MySQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/backups`.\n**Note**: Backups are not supported for Redis or Valkey clusters.\nThe result will be a JSON object with a `backups key`. This will be set to an array of backup objects, each of which will contain the size of the backup and the timestamp at which it was created.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/replicas",
    "method": "GET",
    "operationId": "databases_list_replicas",
    "summary": "List All Read-only Replicas",
    "description": "To list all of the read-only replicas associated with a database cluster, send a GET request to `/v2/databases/$DATABASE_ID/replicas`.\n\n**Note**: Read-only replicas are not supported for Redis or Valkey clusters.\n\nThe result will be a JSON object with a `replicas` key. This will be set to an array of database replica objects, each of which will contain the standard database replica attributes.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/replicas",
    "method": "POST",
    "operationId": "databases_create_replica",
    "summary": "Create a Read-only Replica",
    "description": "To create a read-only replica for a PostgreSQL or MySQL database cluster, send a POST request to `/v2/databases/$DATABASE_ID/replicas` specifying the name it should be given, the size of the node to be used, and the region where it will be located.\n\n**Note**: Read-only replicas are not supported for Redis or Valkey clusters.\n\nThe response will be a JSON object with a key called `replica`. The value of this will be an object that contains the standard attributes associated with a database replica. The initial value of the read-only replica's `status` attribute will be `forking`. When the replica is ready to receive traffic, this will transition to `active`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/events",
    "method": "GET",
    "operationId": "databases_list_events_logs",
    "summary": "List all Events Logs",
    "description": "To list all of the cluster events, send a GET request to\n`/v2/databases/$DATABASE_ID/events`.\n\nThe result will be a JSON object with a `events` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}",
    "method": "GET",
    "operationId": "databases_get_replica",
    "summary": "Retrieve an Existing Read-only Replica",
    "description": "To show information about an existing database replica, send a GET request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.\n\n**Note**: Read-only replicas are not supported for Redis or Valkey clusters.\n\nThe response will be a JSON object with a `replica key`. This will be set to an object containing the standard database replica attributes.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}",
    "method": "DELETE",
    "operationId": "databases_destroy_replica",
    "summary": "Destroy a Read-only Replica",
    "description": "To destroy a specific read-only replica, send a DELETE request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.\n\n**Note**: Read-only replicas are not supported for Redis or Valkey clusters.\n\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}/promote",
    "method": "PUT",
    "operationId": "databases_promote_replica",
    "summary": "Promote a Read-only Replica to become a Primary Cluster",
    "description": "To promote a specific read-only replica, send a PUT request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME/promote`.\n\n**Note**: Read-only replicas are not supported for Redis or Valkey clusters.\n\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/users",
    "method": "GET",
    "operationId": "databases_list_users",
    "summary": "List all Database Users",
    "description": "To list all of the users for your database cluster, send a GET request to\n`/v2/databases/$DATABASE_ID/users`.\n\nNote: User management is not supported for Redis or Valkey clusters.\n\nThe result will be a JSON object with a `users` key. This will be set to an array\nof database user objects, each of which will contain the standard database user attributes.\n\nFor MySQL clusters, additional options will be contained in the mysql_settings object.\n\nFor MongoDB clusters, additional information will be contained in the mongo_user_settings object",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/users",
    "method": "POST",
    "operationId": "databases_add_user",
    "summary": "Add a Database User",
    "description": "To add a new database user, send a POST request to `/v2/databases/$DATABASE_ID/users`\nwith the desired username.\n\nNote: User management is not supported for Redis or Valkey clusters.\n\nWhen adding a user to a MySQL cluster, additional options can be configured in the\n`mysql_settings` object.\n\nWhen adding a user to a Kafka cluster, additional options can be configured in\nthe `settings` object.\n\n When adding a user to a MongoDB cluster, additional options can be configured in\nthe `settings.mongo_user_settings` object.\n\nThe response will be a JSON object with a key called `user`. The value of this will be an\nobject that contains the standard attributes associated with a database user including\nits randomly generated password.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/users/{username}",
    "method": "GET",
    "operationId": "databases_get_user",
    "summary": "Retrieve an Existing Database User",
    "description": "To show information about an existing database user, send a GET request to\n`/v2/databases/$DATABASE_ID/users/$USERNAME`.\n\nNote: User management is not supported for Redis or Valkey clusters.\n\nThe response will be a JSON object with a `user` key. This will be set to an object\ncontaining the standard database user attributes.\n\nFor MySQL clusters, additional options will be contained in the `mysql_settings`\nobject.\n\nFor Kafka clusters, additional options will be contained in the `settings` object.\n\nFor MongoDB clusters, additional information will be contained in the mongo_user_settings object",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/users/{username}",
    "method": "DELETE",
    "operationId": "databases_delete_user",
    "summary": "Remove a Database User",
    "description": "To remove a specific database user, send a DELETE request to\n`/v2/databases/$DATABASE_ID/users/$USERNAME`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n\nNote: User management is not supported for Redis or Valkey clusters.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/users/{username}",
    "method": "PUT",
    "operationId": "databases_update_user",
    "summary": "Update a Database User",
    "description": "To update an existing database user, send a PUT request to `/v2/databases/$DATABASE_ID/users/$USERNAME`\nwith the desired settings.\n\n**Note**: only `settings` can be updated via this type of request. If you wish to change the name of a user,\nyou must recreate a new user.\n\nThe response will be a JSON object with a key called `user`. The value of this will be an\nobject that contains the name of the update database user, along with the `settings` object that\nhas been updated.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/users/{username}/reset_auth",
    "method": "POST",
    "operationId": "databases_reset_auth",
    "summary": "Reset a Database User's Password or Authentication Method",
    "description": "To reset the password for a database user, send a POST request to\n`/v2/databases/$DATABASE_ID/users/$USERNAME/reset_auth`.\n\nFor `mysql` databases, the authentication method can be specifying by\nincluding a key in the JSON body called `mysql_settings` with the `auth_plugin`\nvalue specified.\n\nThe response will be a JSON object with a `user` key. This will be set to an\nobject containing the standard database user attributes.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/dbs",
    "method": "GET",
    "operationId": "databases_list",
    "summary": "List All Databases",
    "description": "To list all of the databases in a clusters, send a GET request to\n`/v2/databases/$DATABASE_ID/dbs`.\n\nThe result will be a JSON object with a `dbs` key. This will be set to an array\nof database objects, each of which will contain the standard database attributes.\n\nNote: Database management is not supported for Redis or Valkey clusters.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/dbs",
    "method": "POST",
    "operationId": "databases_add",
    "summary": "Add a New Database",
    "description": "To add a new database to an existing cluster, send a POST request to\n`/v2/databases/$DATABASE_ID/dbs`.\n\nNote: Database management is not supported for Redis or Valkey clusters.\n\nThe response will be a JSON object with a key called `db`. The value of this will be\nan object that contains the standard attributes associated with a database.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/dbs/{database_name}",
    "method": "GET",
    "operationId": "databases_get",
    "summary": "Retrieve an Existing Database",
    "description": "To show information about an existing database cluster, send a GET request to\n`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.\n\nNote: Database management is not supported for Redis or Valkey clusters.\n\nThe response will be a JSON object with a `db` key. This will be set to an object\ncontaining the standard database attributes.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/dbs/{database_name}",
    "method": "DELETE",
    "operationId": "databases_delete",
    "summary": "Delete a Database",
    "description": "To delete a specific database, send a DELETE request to\n`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n\nNote: Database management is not supported for Redis or Valkey clusters.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/pools",
    "method": "GET",
    "operationId": "databases_list_connectionPools",
    "summary": "List Connection Pools (PostgreSQL)",
    "description": "To list all of the connection pools available to a PostgreSQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/pools`.\nThe result will be a JSON object with a `pools` key. This will be set to an array of connection pool objects.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/pools",
    "method": "POST",
    "operationId": "databases_add_connectionPool",
    "summary": "Add a New Connection Pool (PostgreSQL)",
    "description": "For PostgreSQL database clusters, connection pools can be used to allow a\ndatabase to share its idle connections. The popular PostgreSQL connection\npooling utility PgBouncer is used to provide this service. [See here for more information](https://docs.digitalocean.com/products/databases/postgresql/how-to/manage-connection-pools/)\nabout how and why to use PgBouncer connection pooling including\ndetails about the available transaction modes.\n\nTo add a new connection pool to a PostgreSQL database cluster, send a POST\nrequest to `/v2/databases/$DATABASE_ID/pools` specifying a name for the pool,\nthe user to connect with, the database to connect to, as well as its desired\nsize and transaction mode.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/pools/{pool_name}",
    "method": "GET",
    "operationId": "databases_get_connectionPool",
    "summary": "Retrieve Existing Connection Pool (PostgreSQL)",
    "description": "To show information about an existing connection pool for a PostgreSQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/pools/$POOL_NAME`.\nThe response will be a JSON object with a `pool` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/pools/{pool_name}",
    "method": "PUT",
    "operationId": "databases_update_connectionPool",
    "summary": "Update Connection Pools (PostgreSQL)",
    "description": "To update a connection pool for a PostgreSQL database cluster, send a PUT request to  `/v2/databases/$DATABASE_ID/pools/$POOL_NAME`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/pools/{pool_name}",
    "method": "DELETE",
    "operationId": "databases_delete_connectionPool",
    "summary": "Delete a Connection Pool (PostgreSQL)",
    "description": "To delete a specific connection pool for a PostgreSQL database cluster, send\na DELETE request to `/v2/databases/$DATABASE_ID/pools/$POOL_NAME`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/eviction_policy",
    "method": "GET",
    "operationId": "databases_get_evictionPolicy",
    "summary": "Retrieve the Eviction Policy for a Redis or Valkey Cluster",
    "description": "To retrieve the configured eviction policy for an existing Redis or Valkey cluster, send a GET request to `/v2/databases/$DATABASE_ID/eviction_policy`.\nThe response will be a JSON object with an `eviction_policy` key. This will be set to a string representing the eviction policy.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/eviction_policy",
    "method": "PUT",
    "operationId": "databases_update_evictionPolicy",
    "summary": "Configure the Eviction Policy for a Redis or Valkey Cluster",
    "description": "To configure an eviction policy for an existing Redis or Valkey cluster, send a PUT request to `/v2/databases/$DATABASE_ID/eviction_policy` specifying the desired policy.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/sql_mode",
    "method": "GET",
    "operationId": "databases_get_sql_mode",
    "summary": "Retrieve the SQL Modes for a MySQL Cluster",
    "description": "To retrieve the configured SQL modes for an existing MySQL cluster, send a GET request to `/v2/databases/$DATABASE_ID/sql_mode`.\nThe response will be a JSON object with a `sql_mode` key. This will be set to a string representing the configured SQL modes.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/sql_mode",
    "method": "PUT",
    "operationId": "databases_update_sql_mode",
    "summary": "Update SQL Mode for a Cluster",
    "description": "To configure the SQL modes for an existing MySQL cluster, send a PUT request to `/v2/databases/$DATABASE_ID/sql_mode` specifying the desired modes. See the official MySQL 8 documentation for a [full list of supported SQL modes](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-full).\nA successful request will receive a 204 No Content status code with no body in response.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/upgrade",
    "method": "PUT",
    "operationId": "databases_update_major_version",
    "summary": "Upgrade Major Version for a Database",
    "description": "To upgrade the major version of a database, send a PUT request to `/v2/databases/$DATABASE_ID/upgrade`, specifying the target version.\nA successful request will receive a 204 No Content status code with no body in response.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/topics",
    "method": "GET",
    "operationId": "databases_list_kafka_topics",
    "summary": "List Topics for a Kafka Cluster",
    "description": "To list all of a Kafka cluster's topics, send a GET request to\n`/v2/databases/$DATABASE_ID/topics`.\n\nThe result will be a JSON object with a `topics` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/topics",
    "method": "POST",
    "operationId": "databases_create_kafka_topic",
    "summary": "Create Topic for a Kafka Cluster",
    "description": "To create a topic attached to a Kafka cluster, send a POST request to\n`/v2/databases/$DATABASE_ID/topics`.\n\nThe result will be a JSON object with a `topic` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/topics/{topic_name}",
    "method": "GET",
    "operationId": "databases_get_kafka_topic",
    "summary": "Get Topic for a Kafka Cluster",
    "description": "To retrieve a given topic by name from the set of a Kafka cluster's topics,\nsend a GET request to `/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.\n\nThe result will be a JSON object with a `topic` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/topics/{topic_name}",
    "method": "PUT",
    "operationId": "databases_update_kafka_topic",
    "summary": "Update Topic for a Kafka Cluster",
    "description": "To update a topic attached to a Kafka cluster, send a PUT request to\n`/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.\n\nThe result will be a JSON object with a `topic` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/topics/{topic_name}",
    "method": "DELETE",
    "operationId": "databases_delete_kafka_topic",
    "summary": "Delete Topic for a Kafka Cluster",
    "description": "To delete a single topic within a Kafka cluster, send a DELETE request\nto `/v2/databases/$DATABASE_ID/topics/$TOPIC_NAME`.\n\nA status of 204 will be given. This indicates that the request was\nprocessed successfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/logsink",
    "method": "GET",
    "operationId": "databases_list_logsink",
    "summary": "List Logsinks for a Database Cluster\n",
    "description": "To list logsinks for a database cluster, send a GET request to\n`/v2/databases/$DATABASE_ID/logsink`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/logsink",
    "method": "POST",
    "operationId": "databases_create_logsink",
    "summary": "Create Logsink for a Database Cluster\n",
    "description": "To create logsink for a database cluster, send a POST request to\n`/v2/databases/$DATABASE_ID/logsink`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/logsink/{logsink_id}",
    "method": "GET",
    "operationId": "databases_get_logsink",
    "summary": "Get Logsink for a Database Cluster\n",
    "description": "To get a logsink for a database cluster, send a GET request to\n`/v2/databases/$DATABASE_ID/logsink/$LOGSINK_ID`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/logsink/{logsink_id}",
    "method": "PUT",
    "operationId": "databases_update_logsink",
    "summary": "Update Logsink for a Database Cluster\n",
    "description": "To update a logsink for a database cluster, send a PUT request to\n`/v2/databases/$DATABASE_ID/logsink/$LOGSINK_ID`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/logsink/{logsink_id}",
    "method": "DELETE",
    "operationId": "databases_delete_logsink",
    "summary": "Delete Logsink for a Database Cluster\n",
    "description": "To delete a logsink for a database cluster, send a DELETE request to\n`/v2/databases/$DATABASE_ID/logsink/$LOGSINK_ID`.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/metrics/credentials",
    "method": "GET",
    "operationId": "databases_get_cluster_metrics_credentials",
    "summary": "Retrieve Database Clusters' Metrics Endpoint Credentials",
    "description": "To show the credentials for all database clusters' metrics endpoints, send a GET request to `/v2/databases/metrics/credentials`. The result will be a JSON object with a `credentials` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/metrics/credentials",
    "method": "PUT",
    "operationId": "databases_update_cluster_metrics_credentials",
    "summary": "Update Database Clusters' Metrics Endpoint Credentials",
    "description": "To update the credentials for all database clusters' metrics endpoints, send a PUT request to `/v2/databases/metrics/credentials`. A successful request will receive a 204 No Content status code  with no body in response.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/indexes",
    "method": "GET",
    "operationId": "databases_list_opeasearch_indexes",
    "summary": "List Indexes for a OpenSearch Cluster",
    "description": "To list all of a OpenSearch cluster's indexes, send a GET request to\n`/v2/databases/$DATABASE_ID/indexes`.\n\nThe result will be a JSON object with a `indexes` key.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/databases/{database_cluster_uuid}/indexes/{index_name}",
    "method": "DELETE",
    "operationId": "databases_delete_opensearch_index",
    "summary": "Delete Index for OpenSearch Cluster",
    "description": "To delete a single index within OpenSearch cluster, send a DELETE request\nto `/v2/databases/$DATABASE_ID/indexes/$INDEX_NAME`.\n\nA status of 204 will be given. This indicates that the request was\nprocessed successfully, but that no response body is needed.",
    "tags": [
      "Databases"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains",
    "method": "GET",
    "operationId": "domains_list",
    "summary": "List All Domains",
    "description": "To retrieve a list of all of the domains in your account, send a GET request to `/v2/domains`.",
    "tags": [
      "Domains"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains",
    "method": "POST",
    "operationId": "domains_create",
    "summary": "Create a New Domain",
    "description": "To create a new domain, send a POST request to `/v2/domains`. Set the \"name\"\nattribute to the domain name you are adding. Optionally, you may set the\n\"ip_address\" attribute, and an A record will be automatically created pointing\nto the apex domain.",
    "tags": [
      "Domains"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}",
    "method": "GET",
    "operationId": "domains_get",
    "summary": "Retrieve an Existing Domain",
    "description": "To get details about a specific domain, send a GET request to `/v2/domains/$DOMAIN_NAME`.",
    "tags": [
      "Domains"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}",
    "method": "DELETE",
    "operationId": "domains_delete",
    "summary": "Delete a Domain",
    "description": "To delete a domain, send a DELETE request to `/v2/domains/$DOMAIN_NAME`.",
    "tags": [
      "Domains"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}/records",
    "method": "GET",
    "operationId": "domains_list_records",
    "summary": "List All Domain Records",
    "description": "To get a listing of all records configured for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records`.\nThe list of records returned can be filtered by using the `name` and `type` query parameters. For example, to only include A records for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records?type=A`. `name` must be a fully qualified record name. For example, to only include records matching `sub.example.com`, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`. Both name and type may be used together.",
    "tags": [
      "Domain Records"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}/records",
    "method": "POST",
    "operationId": "domains_create_record",
    "summary": "Create a New Domain Record",
    "description": "To create a new record to a domain, send a POST request to\n`/v2/domains/$DOMAIN_NAME/records`.\n\nThe request must include all of the required fields for the domain record type\nbeing added.\n\nSee the [attribute table](#tag/Domain-Records) for details regarding record\ntypes and their respective required attributes.",
    "tags": [
      "Domain Records"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}/records/{domain_record_id}",
    "method": "GET",
    "operationId": "domains_get_record",
    "summary": "Retrieve an Existing Domain Record",
    "description": "To retrieve a specific domain record, send a GET request to `/v2/domains/$DOMAIN_NAME/records/$RECORD_ID`.",
    "tags": [
      "Domain Records"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}/records/{domain_record_id}",
    "method": "PATCH",
    "operationId": "domains_patch_record",
    "summary": "Update a Domain Record",
    "description": "To update an existing record, send a PATCH request to\n`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid for\nthe record type can be set to a new value for the record.\n\nSee the [attribute table](#tag/Domain-Records) for details regarding record\ntypes and their respective attributes.",
    "tags": [
      "Domain Records"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}/records/{domain_record_id}",
    "method": "PUT",
    "operationId": "domains_update_record",
    "summary": "Update a Domain Record",
    "description": "To update an existing record, send a PUT request to\n`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid for\nthe record type can be set to a new value for the record.\n\nSee the [attribute table](#tag/Domain-Records) for details regarding record\ntypes and their respective attributes.",
    "tags": [
      "Domain Records"
    ],
    "parameters": []
  },
  {
    "path": "/v2/domains/{domain_name}/records/{domain_record_id}",
    "method": "DELETE",
    "operationId": "domains_delete_record",
    "summary": "Delete a Domain Record",
    "description": "To delete a record for a domain, send a DELETE request to\n`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`.\n\nThe record will be deleted and the response status will be a 204. This\nindicates a successful request with no body returned.",
    "tags": [
      "Domain Records"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets",
    "method": "GET",
    "operationId": "droplets_list",
    "summary": "List All Droplets",
    "description": "To list all Droplets in your account, send a GET request to `/v2/droplets`.\n\nThe response body will be a JSON object with a key of `droplets`. This will be\nset to an array containing objects each representing a Droplet. These will\ncontain the standard Droplet attributes.\n\n### Filtering Results by Tag\n\nIt's possible to request filtered results by including certain query parameters.\nTo only list Droplets assigned to a specific tag, include the `tag_name` query\nparameter set to the name of the tag in your GET request. For example,\n`/v2/droplets?tag_name=$TAG_NAME`.\n\n### GPU Droplets\n\nBy default, only non-GPU Droplets are returned. To list only GPU Droplets, set\nthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets",
    "method": "POST",
    "operationId": "droplets_create",
    "summary": "Create a New Droplet",
    "description": "To create a new Droplet, send a POST request to `/v2/droplets` setting the\nrequired attributes.\n\nA Droplet will be created using the provided information. The response body\nwill contain a JSON object with a key called `droplet`. The value will be an\nobject containing the standard attributes for your new Droplet. The response\ncode, 202 Accepted, does not indicate the success or failure of the operation,\njust that the request has been accepted for processing. The `actions` returned\nas part of the response's `links` object can be used to check the status\nof the Droplet create event.\n\n### Create Multiple Droplets\n\nCreating multiple Droplets is very similar to creating a single Droplet.\nInstead of sending `name` as a string, send `names` as an array of strings. A\nDroplet will be created for each name you send using the associated\ninformation. Up to ten Droplets may be created this way at a time.\n\nRather than returning a single Droplet, the response body will contain a JSON\narray with a key called `droplets`. This will be set to an array of JSON\nobjects, each of which will contain the standard Droplet attributes. The\nresponse code, 202 Accepted, does not indicate the success or failure of any\noperation, just that the request has been accepted for processing. The array\nof `actions` returned as part of the response's `links` object can be used to\ncheck the status of each individual Droplet create event.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets",
    "method": "DELETE",
    "operationId": "droplets_destroy_byTag",
    "summary": "Deleting Droplets by Tag",
    "description": "To delete **all** Droplets assigned to a specific tag, include the `tag_name`\nquery parameter set to the name of the tag in your DELETE request. For\nexample,  `/v2/droplets?tag_name=$TAG_NAME`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}",
    "method": "GET",
    "operationId": "droplets_get",
    "summary": "Retrieve an Existing Droplet",
    "description": "To show information about an individual Droplet, send a GET request to\n`/v2/droplets/$DROPLET_ID`.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}",
    "method": "DELETE",
    "operationId": "droplets_destroy",
    "summary": "Delete an Existing Droplet",
    "description": "To delete a Droplet, send a DELETE request to `/v2/droplets/$DROPLET_ID`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/backups",
    "method": "GET",
    "operationId": "droplets_list_backups",
    "summary": "List Backups for a Droplet",
    "description": "To retrieve any backups associated with a Droplet, send a GET request to\n`/v2/droplets/$DROPLET_ID/backups`.\n\nYou will get back a JSON object that has a `backups` key. This will be set to\nan array of backup objects, each of which contain the standard\nDroplet backup attributes.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/backups/policy",
    "method": "GET",
    "operationId": "droplets_get_backup_policy",
    "summary": "Retrieve the Backup Policy for an Existing Droplet",
    "description": "To show information about an individual Droplet's backup policy, send a GET\nrequest to `/v2/droplets/$DROPLET_ID/backups/policy`.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/backups/policies",
    "method": "GET",
    "operationId": "droplets_list_backup_policies",
    "summary": "List Backup Policies for All Existing Droplets",
    "description": "To list information about the backup policies for all Droplets in the account,\nsend a GET request to `/v2/droplets/backups/policies`.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/backups/supported_policies",
    "method": "GET",
    "operationId": "droplets_list_supported_backup_policies",
    "summary": "List Supported Droplet Backup Policies",
    "description": "To retrieve a list of all supported Droplet backup policies, send a GET\nrequest to `/v2/droplets/backups/supported_policies`.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/snapshots",
    "method": "GET",
    "operationId": "droplets_list_snapshots",
    "summary": "List Snapshots for a Droplet",
    "description": "To retrieve the snapshots that have been created from a Droplet, send a GET\nrequest to `/v2/droplets/$DROPLET_ID/snapshots`.\n\nYou will get back a JSON object that has a `snapshots` key. This will be set\nto an array of snapshot objects, each of which contain the standard Droplet\nsnapshot attributes.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/actions",
    "method": "GET",
    "operationId": "dropletActions_list",
    "summary": "List Actions for a Droplet",
    "description": "To retrieve a list of all actions that have been executed for a Droplet, send\na GET request to `/v2/droplets/$DROPLET_ID/actions`.\n\nThe results will be returned as a JSON object with an `actions` key. This will\nbe set to an array filled with `action` objects containing the standard\n`action` attributes.",
    "tags": [
      "Droplet Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/actions",
    "method": "POST",
    "operationId": "dropletActions_post",
    "summary": "Initiate a Droplet Action",
    "description": "To initiate an action on a Droplet send a POST request to\n`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,\nset the `type` attribute to on of the supported action types:\n\n| Action                                   | Details |\n| ---------------------------------------- | ----------- |\n| <nobr>`enable_backups`</nobr>            | Enables backups for a Droplet |\n| <nobr>`disable_backups`</nobr>           | Disables backups for a Droplet |\n| <nobr>`change_backup_policy`</nobr>      | Update the backup policy for a Droplet |\n| <nobr>`reboot`</nobr>                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. |\n| <nobr>`power_cycle`</nobr>               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it's similar to booting from scratch. |\n| <nobr>`shutdown`</nobr>                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. |\n| <nobr>`power_off`</nobr>                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. |\n| <nobr>`power_on`</nobr>                  | Powers on a Droplet. |\n| <nobr>`restore`</nobr>                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. |\n| <nobr>`password_reset`</nobr>            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. |\n| <nobr>`resize`</nobr>                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. |\n| <nobr>`rebuild`</nobr>                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. |\n| <nobr>`rename`</nobr>                    | Renames a Droplet. |\n| <nobr>`change_kernel`</nobr>             | Changes a Droplet's kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. |\n| <nobr>`enable_ipv6`</nobr>               | Enables IPv6 for a Droplet. Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on an existing Droplet, [additional OS-level configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets) is required. |\n| <nobr>`snapshot`</nobr>                  | Takes a snapshot of a Droplet. |",
    "tags": [
      "Droplet Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/actions",
    "method": "POST",
    "operationId": "dropletActions_post_byTag",
    "summary": "Acting on Tagged Droplets",
    "description": "Some actions can be performed in bulk on tagged Droplets. The actions can be\ninitiated by sending a POST to `/v2/droplets/actions?tag_name=$TAG_NAME` with\nthe action arguments.\n\nOnly a sub-set of action types are supported:\n\n- `power_cycle`\n- `power_on`\n- `power_off`\n- `shutdown`\n- `enable_ipv6`\n- `enable_backups`\n- `disable_backups`\n- `snapshot`",
    "tags": [
      "Droplet Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/actions/{action_id}",
    "method": "GET",
    "operationId": "dropletActions_get",
    "summary": "Retrieve a Droplet Action",
    "description": "To retrieve a Droplet action, send a GET request to\n`/v2/droplets/$DROPLET_ID/actions/$ACTION_ID`.\n\nThe response will be a JSON object with a key called `action`. The value will\nbe a Droplet action object.",
    "tags": [
      "Droplet Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/kernels",
    "method": "GET",
    "operationId": "droplets_list_kernels",
    "summary": "List All Available Kernels for a Droplet",
    "description": "To retrieve a list of all kernels available to a Droplet, send a GET request\nto `/v2/droplets/$DROPLET_ID/kernels`\n\nThe response will be a JSON object that has a key called `kernels`. This will\nbe set to an array of `kernel` objects, each of which contain the standard\n`kernel` attributes.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/firewalls",
    "method": "GET",
    "operationId": "droplets_list_firewalls",
    "summary": "List all Firewalls Applied to a Droplet",
    "description": "To retrieve a list of all firewalls available to a Droplet, send a GET request\nto `/v2/droplets/$DROPLET_ID/firewalls`\n\nThe response will be a JSON object that has a key called `firewalls`. This will\nbe set to an array of `firewall` objects, each of which contain the standard\n`firewall` attributes.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/neighbors",
    "method": "GET",
    "operationId": "droplets_list_neighbors",
    "summary": "List Neighbors for a Droplet",
    "description": "To retrieve a list of any \"neighbors\" (i.e. Droplets that are co-located on\nthe same physical hardware) for a specific Droplet, send a GET request to\n`/v2/droplets/$DROPLET_ID/neighbors`.\n\nThe results will be returned as a JSON object with a key of `droplets`. This\nwill be set to an array containing objects representing any other Droplets\nthat share the same physical hardware. An empty array indicates that the\nDroplet is not co-located any other Droplets associated with your account.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/destroy_with_associated_resources",
    "method": "GET",
    "operationId": "droplets_list_associatedResources",
    "summary": "List Associated Resources for a Droplet",
    "description": "To list the associated billable resources that can be destroyed along with a\nDroplet, send a GET request to the\n`/v2/droplets/$DROPLET_ID/destroy_with_associated_resources` endpoint.\n\nThe response will be a JSON object containing `snapshots`, `volumes`, and\n`volume_snapshots` keys. Each will be set to an array of objects containing\ninformation about the associated resources.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/selective",
    "method": "DELETE",
    "operationId": "droplets_destroy_withAssociatedResourcesSelective",
    "summary": "Selectively Destroy a Droplet and its Associated Resources",
    "description": "To destroy a Droplet along with a sub-set of its associated resources, send a\nDELETE request to the `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/selective`\nendpoint. The JSON body of the request should include `reserved_ips`, `snapshots`, `volumes`,\nor `volume_snapshots` keys each set to an array of IDs for the associated\nresources to be destroyed. The IDs can be found by querying the Droplet's\nassociated resources. Any associated resource not included in the request\nwill remain and continue to accrue changes on your account.\n\nA successful response will include a 202 response code and no content. Use\nthe status endpoint to check on the success or failure of the destruction of\nthe individual resources.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/dangerous",
    "method": "DELETE",
    "operationId": "droplets_destroy_withAssociatedResourcesDangerous",
    "summary": "Destroy a Droplet and All of its Associated Resources (Dangerous)",
    "description": "To destroy a Droplet along with all of its associated resources, send a DELETE\nrequest to the `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/dangerous`\nendpoint. The headers of this request must include an `X-Dangerous` key set to\n`true`. To preview which resources will be destroyed, first query the\nDroplet's associated resources. This operation _can not_ be reverse and should\nbe used with caution.\n\nA successful response will include a 202 response code and no content. Use the\nstatus endpoint to check on the success or failure of the destruction of the\nindividual resources.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/status",
    "method": "GET",
    "operationId": "droplets_get_DestroyAssociatedResourcesStatus",
    "summary": "Check Status of a Droplet Destroy with Associated Resources Request",
    "description": "To check on the status of a request to destroy a Droplet with its associated\nresources, send a GET request to the\n`/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/status` endpoint.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/{droplet_id}/destroy_with_associated_resources/retry",
    "method": "POST",
    "operationId": "droplets_destroy_retryWithAssociatedResources",
    "summary": "Retry a Droplet Destroy with Associated Resources Request",
    "description": "If the status of a request to destroy a Droplet with its associated resources\nreported any errors, it can be retried by sending a POST request to the\n`/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/retry` endpoint.\n\nOnly one destroy can be active at a time per Droplet. If a retry is issued\nwhile another destroy is in progress for the Droplet a 409 status code will\nbe returned. A successful response will include a 202 response code and no\ncontent.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale",
    "method": "GET",
    "operationId": "autoscalepools_list",
    "summary": "List All Autoscale Pools",
    "description": "To list all autoscale pools in your team, send a GET request to `/v2/droplets/autoscale`.\nThe response body will be a JSON object with a key of `autoscale_pools` containing an array of autoscale pool objects.\nThese each contain the standard autoscale pool attributes.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale",
    "method": "POST",
    "operationId": "autoscalepools_create",
    "summary": "Create a New Autoscale Pool",
    "description": "To create a new autoscale pool, send a POST request to `/v2/droplets/autoscale` setting the required attributes.\n\nThe response body will contain a JSON object with a key called `autoscale_pool` containing the standard attributes for the new autoscale pool.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale/{autoscale_pool_id}",
    "method": "GET",
    "operationId": "autoscalepools_get",
    "summary": "Retrieve an Existing Autoscale Pool",
    "description": "To show information about an individual autoscale pool, send a GET request to\n`/v2/droplets/autoscale/$AUTOSCALE_POOL_ID`.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale/{autoscale_pool_id}",
    "method": "PUT",
    "operationId": "autoscalepools_update",
    "summary": "Update Autoscale Pool",
    "description": "To update the configuration of an existing autoscale pool, send a PUT request to\n`/v2/droplets/autoscale/$AUTOSCALE_POOL_ID`. The request must contain a full representation\nof the autoscale pool including existing attributes.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale/{autoscale_pool_id}",
    "method": "DELETE",
    "operationId": "autoscalepools_delete",
    "summary": "Delete autoscale pool",
    "description": "To destroy an autoscale pool, send a DELETE request to the `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID` endpoint.\n\nA successful response will include a 202 response code and no content.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale/{autoscale_pool_id}/dangerous",
    "method": "DELETE",
    "operationId": "autoscalepools_delete_dangerous",
    "summary": "Delete autoscale pool and resources",
    "description": "To destroy an autoscale pool and its associated resources (Droplets),\nsend a DELETE request to the `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID/dangerous` endpoint.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale/{autoscale_pool_id}/members",
    "method": "GET",
    "operationId": "autoscalepools_list_members",
    "summary": "List members",
    "description": "To list the Droplets in an autoscale pool, send a GET request to `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID/members`.\n\nThe response body will be a JSON object with a key of `droplets`. This will be\nset to an array containing information about each of the Droplets in the autoscale pool.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/droplets/autoscale/{autoscale_pool_id}/history",
    "method": "GET",
    "operationId": "autoscalepools_list_history",
    "summary": "List history events",
    "description": "To list all of the scaling history events of an autoscale pool, send a GET request to `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID/history`.\n\nThe response body will be a JSON object with a key of `history`. This will be\nset to an array containing objects each representing a history event.",
    "tags": [
      "Droplet Autoscale Pools"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls",
    "method": "GET",
    "operationId": "firewalls_list",
    "summary": "List All Firewalls",
    "description": "To list all of the firewalls available on your account, send a GET request to `/v2/firewalls`.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls",
    "method": "POST",
    "operationId": "firewalls_create",
    "summary": "Create a New Firewall",
    "description": "To create a new firewall, send a POST request to `/v2/firewalls`. The request\nmust contain at least one inbound or outbound access rule.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}",
    "method": "GET",
    "operationId": "firewalls_get",
    "summary": "Retrieve an Existing Firewall",
    "description": "To show information about an existing firewall, send a GET request to `/v2/firewalls/$FIREWALL_ID`.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}",
    "method": "PUT",
    "operationId": "firewalls_update",
    "summary": "Update a Firewall",
    "description": "To update the configuration of an existing firewall, send a PUT request to\n`/v2/firewalls/$FIREWALL_ID`. The request should contain a full representation\nof the firewall including existing attributes. **Note that any attributes that\nare not provided will be reset to their default values.**",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}",
    "method": "DELETE",
    "operationId": "firewalls_delete",
    "summary": "Delete a Firewall",
    "description": "To delete a firewall send a DELETE request to `/v2/firewalls/$FIREWALL_ID`.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}/droplets",
    "method": "POST",
    "operationId": "firewalls_assign_droplets",
    "summary": "Add Droplets to a Firewall",
    "description": "To assign a Droplet to a firewall, send a POST request to\n`/v2/firewalls/$FIREWALL_ID/droplets`. In the body of the request, there\nshould be a `droplet_ids` attribute containing a list of Droplet IDs.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}/droplets",
    "method": "DELETE",
    "operationId": "firewalls_delete_droplets",
    "summary": "Remove Droplets from a Firewall",
    "description": "To remove a Droplet from a firewall, send a DELETE request to\n`/v2/firewalls/$FIREWALL_ID/droplets`. In the body of the request, there should\nbe a `droplet_ids` attribute containing a list of Droplet IDs.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}/tags",
    "method": "POST",
    "operationId": "firewalls_add_tags",
    "summary": "Add Tags to a Firewall",
    "description": "To assign a tag representing a group of Droplets to a firewall, send a POST\nrequest to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the request,\nthere should be a `tags` attribute containing a list of tag names.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}/tags",
    "method": "DELETE",
    "operationId": "firewalls_delete_tags",
    "summary": "Remove Tags from a Firewall",
    "description": "To remove a tag representing a group of Droplets from a firewall, send a\nDELETE request to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the\nrequest, there should be a `tags` attribute containing a list of tag names.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}/rules",
    "method": "POST",
    "operationId": "firewalls_add_rules",
    "summary": "Add Rules to a Firewall",
    "description": "To add additional access rules to a firewall, send a POST request to\n`/v2/firewalls/$FIREWALL_ID/rules`. The body of the request may include an\ninbound_rules and/or outbound_rules attribute containing an array of rules to\nbe added.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/firewalls/{firewall_id}/rules",
    "method": "DELETE",
    "operationId": "firewalls_delete_rules",
    "summary": "Remove Rules from a Firewall",
    "description": "To remove access rules from a firewall, send a DELETE request to\n`/v2/firewalls/$FIREWALL_ID/rules`. The body of the request may include an\n`inbound_rules` and/or `outbound_rules` attribute containing an array of rules\nto be removed.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Firewalls"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips",
    "method": "GET",
    "operationId": "floatingIPs_list",
    "summary": "List All Floating IPs",
    "description": "To list all of the floating IPs available on your account, send a GET request to `/v2/floating_ips`.",
    "tags": [
      "Floating IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips",
    "method": "POST",
    "operationId": "floatingIPs_create",
    "summary": "Create a New Floating IP",
    "description": "On creation, a floating IP must be either assigned to a Droplet or reserved to a region.\n* To create a new floating IP assigned to a Droplet, send a POST\n  request to `/v2/floating_ips` with the `droplet_id` attribute.\n\n* To create a new floating IP reserved to a region, send a POST request to\n  `/v2/floating_ips` with the `region` attribute.\n\n**Note**:  In addition to the standard rate limiting, only 12 floating IPs may be created per 60 seconds.",
    "tags": [
      "Floating IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips/{floating_ip}",
    "method": "GET",
    "operationId": "floatingIPs_get",
    "summary": "Retrieve an Existing Floating IP",
    "description": "To show information about a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP_ADDR`.",
    "tags": [
      "Floating IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips/{floating_ip}",
    "method": "DELETE",
    "operationId": "floatingIPs_delete",
    "summary": "Delete a Floating IP",
    "description": "To delete a floating IP and remove it from your account, send a DELETE request\nto `/v2/floating_ips/$FLOATING_IP_ADDR`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Floating IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips/{floating_ip}/actions",
    "method": "GET",
    "operationId": "floatingIPsAction_list",
    "summary": "List All Actions for a Floating IP",
    "description": "To retrieve all actions that have been executed on a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP/actions`.",
    "tags": [
      "Floating IP Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips/{floating_ip}/actions",
    "method": "POST",
    "operationId": "floatingIPsAction_post",
    "summary": "Initiate a Floating IP Action",
    "description": "To initiate an action on a floating IP send a POST request to\n`/v2/floating_ips/$FLOATING_IP/actions`. In the JSON body to the request,\nset the `type` attribute to on of the supported action types:\n\n| Action     | Details\n|------------|--------\n| `assign`   | Assigns a floating IP to a Droplet\n| `unassign` | Unassign a floating IP from a Droplet",
    "tags": [
      "Floating IP Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/floating_ips/{floating_ip}/actions/{action_id}",
    "method": "GET",
    "operationId": "floatingIPsAction_get",
    "summary": "Retrieve an Existing Floating IP Action",
    "description": "To retrieve the status of a floating IP action, send a GET request to `/v2/floating_ips/$FLOATING_IP/actions/$ACTION_ID`.",
    "tags": [
      "Floating IP Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces",
    "method": "GET",
    "operationId": "functions_list_namespaces",
    "summary": "List Namespaces",
    "description": "Returns a list of namespaces associated with the current user. To get all namespaces, send a GET request to `/v2/functions/namespaces`.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces",
    "method": "POST",
    "operationId": "functions_create_namespace",
    "summary": "Create Namespace",
    "description": "Creates a new serverless functions namespace in the desired region and associates it with the provided label. A namespace is a collection of functions and their associated packages, triggers, and project specifications. To create a namespace, send a POST request to `/v2/functions/namespaces` with the `region` and `label` properties.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}",
    "method": "GET",
    "operationId": "functions_get_namespace",
    "summary": "Get Namespace",
    "description": "Gets the namespace details for the given namespace UUID. To get namespace details, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID` with no parameters.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}",
    "method": "DELETE",
    "operationId": "functions_delete_namespace",
    "summary": "Delete Namespace",
    "description": "Deletes the given namespace.  When a namespace is deleted all assets, in the namespace are deleted, this includes packages, functions and triggers. Deleting a namespace is a destructive operation and assets in the namespace are not recoverable after deletion. Some metadata is retained, such as activations, or soft deleted for reporting purposes.\nTo delete namespace, send a DELETE request to `/v2/functions/namespaces/$NAMESPACE_ID`.\nA successful deletion returns a 204 response.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}/triggers",
    "method": "GET",
    "operationId": "functions_list_triggers",
    "summary": "List Triggers",
    "description": "Returns a list of triggers associated with the current user and namespace. To get all triggers, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers`.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}/triggers",
    "method": "POST",
    "operationId": "functions_create_trigger",
    "summary": "Create Trigger",
    "description": "Creates a new trigger for a given function in a namespace. To create a trigger, send a POST request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers` with the `name`, `function`, `type`, `is_enabled` and `scheduled_details` properties.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}",
    "method": "GET",
    "operationId": "functions_get_trigger",
    "summary": "Get Trigger",
    "description": "Gets the trigger details. To get the trigger details, send a GET request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers/$TRIGGER_NAME`.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}",
    "method": "PUT",
    "operationId": "functions_update_trigger",
    "summary": "Update Trigger",
    "description": "Updates the details of the given trigger. To update a trigger, send a PUT request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers/$TRIGGER_NAME` with new values for the `is_enabled ` or `scheduled_details` properties.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/functions/namespaces/{namespace_id}/triggers/{trigger_name}",
    "method": "DELETE",
    "operationId": "functions_delete_trigger",
    "summary": "Delete Trigger",
    "description": "Deletes the given trigger.\nTo delete trigger, send a DELETE request to `/v2/functions/namespaces/$NAMESPACE_ID/triggers/$TRIGGER_NAME`.\nA successful deletion returns a 204 response.",
    "tags": [
      "Functions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images",
    "method": "GET",
    "operationId": "images_list",
    "summary": "List All Images",
    "description": "To list all of the images available on your account, send a GET request to /v2/images.\n\n## Filtering Results\n-----\n\nIt's possible to request filtered results by including certain query parameters.\n\n**Image Type**\n\nEither 1-Click Application or OS Distribution images can be filtered by using the `type` query parameter.\n\n> Important: The `type` query parameter does not directly relate to the `type` attribute.\n\nTo retrieve only ***distribution*** images, include the `type` query parameter set to distribution, `/v2/images?type=distribution`.\n\nTo retrieve only ***application*** images, include the `type` query parameter set to application, `/v2/images?type=application`.\n\n**User Images**\n\nTo retrieve only the private images of a user, include the `private` query parameter set to true, `/v2/images?private=true`.\n\n**Tags**\n\nTo list all images assigned to a specific tag, include the `tag_name` query parameter set to the name of the tag in your GET request. For example, `/v2/images?tag_name=$TAG_NAME`.",
    "tags": [
      "Images"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images",
    "method": "POST",
    "operationId": "images_create_custom",
    "summary": "Create a Custom Image",
    "description": "To create a new custom image, send a POST request to /v2/images.\nThe body must contain a url attribute pointing to a Linux virtual machine\nimage to be imported into DigitalOcean.\nThe image must be in the raw, qcow2, vhdx, vdi, or vmdk format.\nIt may be compressed using gzip or bzip2 and must be smaller than 100 GB after\n being decompressed.",
    "tags": [
      "Images"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images/{image_id}",
    "method": "GET",
    "operationId": "images_get",
    "summary": "Retrieve an Existing Image",
    "description": "To retrieve information about an image, send a `GET` request to\n`/v2/images/$IDENTIFIER`.",
    "tags": [
      "Images"
    ],
    "parameters": [
      {
        "name": "image_id",
        "in": "path",
        "required": true,
        "description": "A unique number (id) or string (slug) used to identify and reference a\nspecific image.\n\n**Public** images can be identified by image `id` or `slug`.\n\n**Private** images *must* be identified by image `id`.\n",
        "type": ""
      }
    ]
  },
  {
    "path": "/v2/images/{image_id}",
    "method": "PUT",
    "operationId": "images_update",
    "summary": "Update an Image",
    "description": "To update an image, send a `PUT` request to `/v2/images/$IMAGE_ID`.\nSet the `name` attribute to the new value you would like to use.\nFor custom images, the `description` and `distribution` attributes may also be updated.",
    "tags": [
      "Images"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images/{image_id}",
    "method": "DELETE",
    "operationId": "images_delete",
    "summary": "Delete an Image",
    "description": "To delete a snapshot or custom image, send a `DELETE` request to `/v2/images/$IMAGE_ID`.",
    "tags": [
      "Images"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images/{image_id}/actions",
    "method": "GET",
    "operationId": "imageActions_list",
    "summary": "List All Actions for an Image",
    "description": "To retrieve all actions that have been executed on an image, send a GET request to `/v2/images/$IMAGE_ID/actions`.",
    "tags": [
      "Image Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images/{image_id}/actions",
    "method": "POST",
    "operationId": "imageActions_post",
    "summary": "Initiate an Image Action",
    "description": "The following actions are available on an Image.\n\n## Convert an Image to a Snapshot\n\nTo convert an image, for example, a backup to a snapshot, send a POST request\nto `/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `convert`.\n\n## Transfer an Image\n\nTo transfer an image to another region, send a POST request to\n`/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `transfer` and set\n`region` attribute to the slug identifier of the region you wish to transfer\nto.",
    "tags": [
      "Image Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/images/{image_id}/actions/{action_id}",
    "method": "GET",
    "operationId": "imageActions_get",
    "summary": "Retrieve an Existing Action",
    "description": "To retrieve the status of an image action, send a GET request to `/v2/images/$IMAGE_ID/actions/$IMAGE_ACTION_ID`.",
    "tags": [
      "Image Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters",
    "method": "GET",
    "operationId": "kubernetes_list_clusters",
    "summary": "List All Kubernetes Clusters",
    "description": "To list all of the Kubernetes clusters on your account, send a GET request\nto `/v2/kubernetes/clusters`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters",
    "method": "POST",
    "operationId": "kubernetes_create_cluster",
    "summary": "Create a New Kubernetes Cluster",
    "description": "To create a new Kubernetes cluster, send a POST request to\n`/v2/kubernetes/clusters`. The request must contain at least one node pool\nwith at least one worker.\n\nThe request may contain a maintenance window policy describing a time period\nwhen disruptive maintenance tasks may be carried out. Omitting the policy\nimplies that a window will be chosen automatically. See\n[here](https://docs.digitalocean.com/products/kubernetes/how-to/upgrade-cluster/)\nfor details.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}",
    "method": "GET",
    "operationId": "kubernetes_get_cluster",
    "summary": "Retrieve an Existing Kubernetes Cluster",
    "description": "To show information about an existing Kubernetes cluster, send a GET request\nto `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}",
    "method": "PUT",
    "operationId": "kubernetes_update_cluster",
    "summary": "Update a Kubernetes Cluster",
    "description": "To update a Kubernetes cluster, send a PUT request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID` and specify one or more of the\nattributes below.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}",
    "method": "DELETE",
    "operationId": "kubernetes_delete_cluster",
    "summary": "Delete a Kubernetes Cluster",
    "description": "To delete a Kubernetes cluster and all services deployed to it, send a DELETE\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.\n\nA 204 status code with no body will be returned in response to a successful\nrequest.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources",
    "method": "GET",
    "operationId": "kubernetes_list_associatedResources",
    "summary": "List Associated Resources for Cluster Deletion",
    "description": "To list the associated billable resources that can be destroyed along with a cluster, send a GET request to the `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources` endpoint.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/selective",
    "method": "DELETE",
    "operationId": "kubernetes_destroy_associatedResourcesSelective",
    "summary": "Selectively Delete a Cluster and its Associated Resources",
    "description": "To delete a Kubernetes cluster along with a subset of its associated resources,\nsend a DELETE request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources/selective`.\n\nThe JSON body of the request should include `load_balancers`, `volumes`, or\n`volume_snapshots` keys each set to an array of IDs for the associated\nresources to be destroyed.\n\nThe IDs can be found by querying the cluster's associated resources endpoint.\nAny associated resource not included in the request will remain and continue\nto accrue changes on your account.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/dangerous",
    "method": "DELETE",
    "operationId": "kubernetes_destroy_associatedResourcesDangerous",
    "summary": "Delete a Cluster and All of its Associated Resources (Dangerous)",
    "description": "To delete a Kubernetes cluster with all of its associated resources, send a\nDELETE request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources/dangerous`.\nA 204 status code with no body will be returned in response to a successful request.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/kubeconfig",
    "method": "GET",
    "operationId": "kubernetes_get_kubeconfig",
    "summary": "Retrieve the kubeconfig for a Kubernetes Cluster",
    "description": "This endpoint returns a kubeconfig file in YAML format. It can be used to\nconnect to and administer the cluster using the Kubernetes command line tool,\n`kubectl`, or other programs supporting kubeconfig files (e.g., client libraries).\n\nThe resulting kubeconfig file uses token-based authentication for clusters\nsupporting it, and certificate-based authentication otherwise. For a list of\nsupported versions and more information, see \"[How to Connect to a DigitalOcean\nKubernetes Cluster](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/)\".\n\nTo retrieve a kubeconfig file for use with a Kubernetes cluster, send a GET\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig`.\n\nClusters supporting token-based authentication may define an expiration by\npassing a duration in seconds as a query parameter to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig?expiry_seconds=$DURATION_IN_SECONDS`.\nIf not set or 0, then the token will have a 7 day expiry. The query parameter\nhas no impact in certificate-based authentication.\n\nKubernetes Roles granted to a user with a token-based kubeconfig are derived from that user's\nDigitalOcean role. Predefined roles (Owner, Member, Modifier etc.) have an automatic mapping\nto Kubernetes roles. Custom roles are not automatically mapped to any Kubernetes roles,\nand require [additional configuration](https://docs.digitalocean.com/products/kubernetes/how-to/set-up-custom-rolebindings/)\nby a cluster administrator.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/credentials",
    "method": "GET",
    "operationId": "kubernetes_get_credentials",
    "summary": "Retrieve Credentials for a Kubernetes Cluster",
    "description": "This endpoint returns a JSON object . It can be used to programmatically\nconstruct Kubernetes clients which cannot parse kubeconfig files.\n\nThe resulting JSON object contains token-based authentication for clusters\nsupporting it, and certificate-based authentication otherwise. For a list of\nsupported versions and more information, see \"[How to Connect to a DigitalOcean\nKubernetes Cluster](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/)\".\n\nTo retrieve credentials for accessing a Kubernetes cluster, send a GET\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/credentials`.\n\nClusters supporting token-based authentication may define an expiration by\npassing a duration in seconds as a query parameter to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/credentials?expiry_seconds=$DURATION_IN_SECONDS`.\nIf not set or 0, then the token will have a 7 day expiry. The query parameter\nhas no impact in certificate-based authentication.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/upgrades",
    "method": "GET",
    "operationId": "kubernetes_get_availableUpgrades",
    "summary": "Retrieve Available Upgrades for an Existing Kubernetes Cluster",
    "description": "To determine whether a cluster can be upgraded, and the versions to which it\ncan be upgraded, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrades`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/upgrade",
    "method": "POST",
    "operationId": "kubernetes_upgrade_cluster",
    "summary": "Upgrade a Kubernetes Cluster",
    "description": "To immediately upgrade a Kubernetes cluster to a newer patch release of\nKubernetes, send a POST request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrade`.\nThe body of the request must specify a version attribute.\n\nAvailable upgrade versions for a cluster can be fetched from\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrades`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools",
    "method": "GET",
    "operationId": "kubernetes_list_nodePools",
    "summary": "List All Node Pools in a Kubernetes Clusters",
    "description": "To list all of the node pools in a Kubernetes clusters, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools",
    "method": "POST",
    "operationId": "kubernetes_add_nodePool",
    "summary": "Add a Node Pool to a Kubernetes Cluster",
    "description": "To add an additional node pool to a Kubernetes clusters, send a POST request\nto `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools` with the following\nattributes.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}",
    "method": "GET",
    "operationId": "kubernetes_get_nodePool",
    "summary": "Retrieve a Node Pool for a Kubernetes Cluster",
    "description": "To show information about a specific node pool in a Kubernetes cluster, send\na GET request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}",
    "method": "PUT",
    "operationId": "kubernetes_update_nodePool",
    "summary": "Update a Node Pool in a Kubernetes Cluster",
    "description": "To update the name of a node pool, edit the tags applied to it, or adjust its\nnumber of nodes, send a PUT request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID` with the\nfollowing attributes.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}",
    "method": "DELETE",
    "operationId": "kubernetes_delete_nodePool",
    "summary": "Delete a Node Pool in a Kubernetes Cluster",
    "description": "To delete a node pool, send a DELETE request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.\n\nA 204 status code with no body will be returned in response to a successful\nrequest. Nodes in the pool will subsequently be drained and deleted.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}",
    "method": "DELETE",
    "operationId": "kubernetes_delete_node",
    "summary": "Delete a Node in a Kubernetes Cluster",
    "description": "To delete a single node in a pool, send a DELETE request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.\n\nAppending the `skip_drain=1` query parameter to the request causes node\ndraining to be skipped. Omitting the query parameter or setting its value to\n`0` carries out draining prior to deletion.\n\nAppending the `replace=1` query parameter to the request causes the node to\nbe replaced by a new one after deletion. Omitting the query parameter or\nsetting its value to `0` deletes without replacement.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/recycle",
    "method": "POST",
    "operationId": "kubernetes_recycle_node_pool",
    "summary": "Recycle a Kubernetes Node Pool",
    "description": "The endpoint has been deprecated. Please use the DELETE\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`\nmethod instead.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/user",
    "method": "GET",
    "operationId": "kubernetes_get_clusterUser",
    "summary": "Retrieve User Information for a Kubernetes Cluster",
    "description": "To show information the user associated with a Kubernetes cluster, send a GET\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/user`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/options",
    "method": "GET",
    "operationId": "kubernetes_list_options",
    "summary": "List Available Regions, Node Sizes, and Versions of Kubernetes",
    "description": "To list the versions of Kubernetes available for use, the regions that support Kubernetes, and the available node sizes, send a GET request to `/v2/kubernetes/options`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/clusterlint",
    "method": "POST",
    "operationId": "kubernetes_run_clusterLint",
    "summary": "Run Clusterlint Checks on a Kubernetes Cluster",
    "description": "Clusterlint helps operators conform to Kubernetes best practices around\nresources, security and reliability to avoid common problems while operating\nor upgrading the clusters.\n\nTo request a clusterlint run on your cluster, send a POST request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. This will run all\nchecks present in the `doks` group by default, if a request body is not\nspecified. Optionally specify the below attributes.\n\nFor information about the available checks, please refer to\n[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/clusterlint",
    "method": "GET",
    "operationId": "kubernetes_get_clusterLintResults",
    "summary": "Fetch Clusterlint Diagnostics for a Kubernetes Cluster",
    "description": "To request clusterlint diagnostics for your cluster, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. If the `run_id` query\nparameter is provided, then the diagnostics for the specific run is fetched.\nBy default, the latest results are shown.\n\nTo find out how to address clusterlint feedback, please refer to\n[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/registry",
    "method": "POST",
    "operationId": "kubernetes_add_registry",
    "summary": "Add Container Registry to Kubernetes Clusters",
    "description": "To integrate the container registry with Kubernetes clusters, send a POST request to `/v2/kubernetes/registry`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/registry",
    "method": "DELETE",
    "operationId": "kubernetes_remove_registry",
    "summary": "Remove Container Registry from Kubernetes Clusters",
    "description": "To remove the container registry from Kubernetes clusters, send a DELETE request to `/v2/kubernetes/registry`.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/kubernetes/clusters/{cluster_id}/status_messages",
    "method": "GET",
    "operationId": "kubernetes_get_status_messages",
    "summary": "Fetch Status Messages for a Kubernetes Cluster",
    "description": "To retrieve status messages for a Kubernetes cluster, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/status_messages`. Status messages inform users of any issues that come up during the cluster lifecycle.",
    "tags": [
      "Kubernetes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers",
    "method": "POST",
    "operationId": "loadBalancers_create",
    "summary": "Create a New Load Balancer",
    "description": "To create a new load balancer instance, send a POST request to\n`/v2/load_balancers`.\n\nYou can specify the Droplets that will sit behind the load balancer using one\nof two methods:\n\n* Set `droplet_ids` to a list of specific Droplet IDs.\n* Set `tag` to the name of a tag. All Droplets with this tag applied will be\n  assigned to the load balancer. Additional Droplets will be automatically\n  assigned as they are tagged.\n\nThese methods are mutually exclusive.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers",
    "method": "GET",
    "operationId": "loadBalancers_list",
    "summary": "List All Load Balancers",
    "description": "To list all of the load balancer instances on your account, send a GET request\nto `/v2/load_balancers`.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}",
    "method": "GET",
    "operationId": "loadBalancers_get",
    "summary": "Retrieve an Existing Load Balancer",
    "description": "To show information about a load balancer instance, send a GET request to\n`/v2/load_balancers/$LOAD_BALANCER_ID`.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}",
    "method": "PUT",
    "operationId": "loadBalancers_update",
    "summary": "Update a Load Balancer",
    "description": "To update a load balancer's settings, send a PUT request to\n`/v2/load_balancers/$LOAD_BALANCER_ID`. The request should contain a full\nrepresentation of the load balancer including existing attributes. It may\ncontain _one of_ the `droplets_ids` or `tag` attributes as they are mutually\nexclusive. **Note that any attribute that is not provided will be reset to its\ndefault value.**",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}",
    "method": "DELETE",
    "operationId": "loadBalancers_delete",
    "summary": "Delete a Load Balancer",
    "description": "To delete a load balancer instance, disassociating any Droplets assigned to it\nand removing it from your account, send a DELETE request to\n`/v2/load_balancers/$LOAD_BALANCER_ID`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}/cache",
    "method": "DELETE",
    "operationId": "loadBalancers_delete_cache",
    "summary": "Delete a Global Load Balancer CDN Cache",
    "description": "To delete a Global load balancer CDN cache, send a DELETE request to\n`/v2/load_balancers/$LOAD_BALANCER_ID/cache`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}/droplets",
    "method": "POST",
    "operationId": "loadBalancers_add_droplets",
    "summary": "Add Droplets to a Load Balancer",
    "description": "To assign a Droplet to a load balancer instance, send a POST request to\n`/v2/load_balancers/$LOAD_BALANCER_ID/droplets`. In the body of the request,\nthere should be a `droplet_ids` attribute containing a list of Droplet IDs.\nIndividual Droplets can not be added to a load balancer configured with a\nDroplet tag. Attempting to do so will result in a \"422 Unprocessable Entity\"\nresponse from the API.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}/droplets",
    "method": "DELETE",
    "operationId": "loadBalancers_remove_droplets",
    "summary": "Remove Droplets from a Load Balancer",
    "description": "To remove a Droplet from a load balancer instance, send a DELETE request to\n`/v2/load_balancers/$LOAD_BALANCER_ID/droplets`. In the body of the request,\nthere should be a `droplet_ids` attribute containing a list of Droplet IDs.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}/forwarding_rules",
    "method": "POST",
    "operationId": "loadBalancers_add_forwardingRules",
    "summary": "Add Forwarding Rules to a Load Balancer",
    "description": "To add an additional forwarding rule to a load balancer instance, send a POST\nrequest to `/v2/load_balancers/$LOAD_BALANCER_ID/forwarding_rules`. In the body\nof the request, there should be a `forwarding_rules` attribute containing an\narray of rules to be added.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/load_balancers/{lb_id}/forwarding_rules",
    "method": "DELETE",
    "operationId": "loadBalancers_remove_forwardingRules",
    "summary": "Remove Forwarding Rules from a Load Balancer",
    "description": "To remove forwarding rules from a load balancer instance, send a DELETE\nrequest to `/v2/load_balancers/$LOAD_BALANCER_ID/forwarding_rules`. In the\nbody of the request, there should be a `forwarding_rules` attribute containing\nan array of rules to be removed.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.",
    "tags": [
      "Load Balancers"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/alerts",
    "method": "GET",
    "operationId": "monitoring_list_alertPolicy",
    "summary": "List Alert Policies",
    "description": "Returns all alert policies that are configured for the given account. To List all alert policies, send a GET request to `/v2/monitoring/alerts`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/alerts",
    "method": "POST",
    "operationId": "monitoring_create_alertPolicy",
    "summary": "Create Alert Policy",
    "description": "To create a new alert, send a POST request to `/v2/monitoring/alerts`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/alerts/{alert_uuid}",
    "method": "GET",
    "operationId": "monitoring_get_alertPolicy",
    "summary": "Retrieve an Existing Alert Policy",
    "description": "To retrieve a given alert policy, send a GET request to `/v2/monitoring/alerts/{alert_uuid}`",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/alerts/{alert_uuid}",
    "method": "PUT",
    "operationId": "monitoring_update_alertPolicy",
    "summary": "Update an Alert Policy",
    "description": "To update en existing policy, send a PUT request to `v2/monitoring/alerts/{alert_uuid}`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/alerts/{alert_uuid}",
    "method": "DELETE",
    "operationId": "monitoring_delete_alertPolicy",
    "summary": "Delete an Alert Policy",
    "description": "To delete an alert policy, send a DELETE request to `/v2/monitoring/alerts/{alert_uuid}`",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/bandwidth",
    "method": "GET",
    "operationId": "monitoring_get_dropletBandwidthMetrics",
    "summary": "Get Droplet Bandwidth Metrics",
    "description": "To retrieve bandwidth metrics for a given Droplet, send a GET request to `/v2/monitoring/metrics/droplet/bandwidth`. Use the `interface` query parameter to specify if the results should be for the `private` or `public` interface. Use the `direction` query parameter to specify if the results should be for `inbound` or `outbound` traffic.\nThe metrics in the response body are in megabits per second (Mbps).",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/cpu",
    "method": "GET",
    "operationId": "monitoring_get_DropletCpuMetrics",
    "summary": "Get Droplet CPU Metrics",
    "description": "To retrieve CPU metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/cpu`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/filesystem_free",
    "method": "GET",
    "operationId": "monitoring_get_dropletFilesystemFreeMetrics",
    "summary": "Get Droplet Filesystem Free Metrics",
    "description": "To retrieve filesystem free metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/filesystem_free`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/filesystem_size",
    "method": "GET",
    "operationId": "monitoring_get_dropletFilesystemSizeMetrics",
    "summary": "Get Droplet Filesystem Size Metrics",
    "description": "To retrieve filesystem size metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/filesystem_size`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/load_1",
    "method": "GET",
    "operationId": "monitoring_get_dropletLoad1Metrics",
    "summary": "Get Droplet Load1 Metrics",
    "description": "To retrieve 1 minute load average metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/load_1`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/load_5",
    "method": "GET",
    "operationId": "monitoring_get_dropletLoad5Metrics",
    "summary": "Get Droplet Load5 Metrics",
    "description": "To retrieve 5 minute load average metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/load_5`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/load_15",
    "method": "GET",
    "operationId": "monitoring_get_dropletLoad15Metrics",
    "summary": "Get Droplet Load15 Metrics",
    "description": "To retrieve 15 minute load average metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/load_15`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/memory_cached",
    "method": "GET",
    "operationId": "monitoring_get_dropletMemoryCachedMetrics",
    "summary": "Get Droplet Cached Memory Metrics",
    "description": "To retrieve cached memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_cached`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/memory_free",
    "method": "GET",
    "operationId": "monitoring_get_dropletMemoryFreeMetrics",
    "summary": "Get Droplet Free Memory Metrics",
    "description": "To retrieve free memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_free`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/memory_total",
    "method": "GET",
    "operationId": "monitoring_get_dropletMemoryTotalMetrics",
    "summary": "Get Droplet Total Memory Metrics",
    "description": "To retrieve total memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_total`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet/memory_available",
    "method": "GET",
    "operationId": "monitoring_get_dropletMemoryAvailableMetrics",
    "summary": "Get Droplet Available Memory Metrics",
    "description": "To retrieve available memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_available`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/apps/memory_percentage",
    "method": "GET",
    "operationId": "monitoring_get_appMemoryPercentageMetrics",
    "summary": "Get App Memory Percentage Metrics",
    "description": "To retrieve memory percentage metrics for a given app, send a GET request to `/v2/monitoring/metrics/apps/memory_percentage`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/apps/cpu_percentage",
    "method": "GET",
    "operationId": "monitoring_get_appCPUPercentageMetrics",
    "summary": "Get App CPU Percentage Metrics",
    "description": "To retrieve cpu percentage metrics for a given app, send a GET request to `/v2/monitoring/metrics/apps/cpu_percentage`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/apps/restart_count",
    "method": "GET",
    "operationId": "monitoring_get_appRestartCountMetrics.yml",
    "summary": "Get App Restart Count Metrics",
    "description": "To retrieve restart count metrics for a given app, send a GET request to `/v2/monitoring/metrics/apps/restart_count`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_connections_current",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_connections_current",
    "summary": "Get Load Balancer Frontend Total Current Active Connections Metrics",
    "description": "To retrieve frontend total current active connections for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_connections_current`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_connections_limit",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_connections_limit",
    "summary": "Get Load Balancer Frontend Max Connections Limit Metrics",
    "description": "To retrieve frontend max connections limit for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_connections_limit`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_cpu_utilization",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_cpu_utilization",
    "summary": "Get Load Balancer Frontend Average Percentage CPU Utilization Metrics",
    "description": "To retrieve frontend average percentage CPU utilization for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_cpu_utilization`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_firewall_dropped_bytes",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_firewall_dropped_bytes",
    "summary": "Get Load Balancer Frontend Firewall Dropped Bytes Metrics",
    "description": "To retrieve firewall dropped bytes for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_firewall_dropped_bytes`. This is currently only supported for network load balancers.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_firewall_dropped_packets",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_firewall_dropped_packets",
    "summary": "Get Load Balancer Frontend Firewall Dropped Packets Metrics",
    "description": "To retrieve firewall dropped packets per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_firewall_dropped_packets`. This is currently only supported for network load balancers.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_http_responses",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_http_responses",
    "summary": "Get Load Balancer Frontend HTTP Rate Of Response Code Metrics",
    "description": "To retrieve frontend HTTP rate of response code for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_http_responses`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_http_requests_per_second",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_http_requests_per_second",
    "summary": "Get Load Balancer Frontend HTTP Requests Metrics",
    "description": "To retrieve frontend HTTP requests per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_http_requests_per_second`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_network_throughput_http",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_network_throughput_http",
    "summary": "Get Load Balancer Frontend HTTP Throughput Metrics",
    "description": "To retrieve frontend HTTP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_network_throughput_http`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_network_throughput_udp",
    "summary": "Get Load Balancer Frontend UDP Throughput Metrics",
    "description": "To retrieve frontend UDP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_network_throughput_udp`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_network_throughput_tcp",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_network_throughput_tcp",
    "summary": "Get Load Balancer Frontend TCP Throughput Metrics",
    "description": "To retrieve frontend TCP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_network_throughput_tcp`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_nlb_tcp_network_throughput",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_nlb_tcp_network_throughput",
    "summary": "Get Network Load Balancer Frontend TCP Throughput Metrics",
    "description": "To retrieve frontend TCP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_nlb_tcp_network_throughput`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_nlb_udp_network_throughput",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_nlb_udp_network_throughput",
    "summary": "Get Network Load Balancer Frontend UDP Throughput Metrics",
    "description": "To retrieve frontend UDP throughput in bytes per second for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_nlb_udp_network_throughput`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_tls_connections_current",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_tls_connections_current",
    "summary": "Get Load Balancer Frontend Current TLS Connections Rate Metrics",
    "description": "To retrieve frontend current TLS connections rate for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_tls_connections_current`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_tls_connections_limit",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_tls_connections_limit",
    "summary": "Get Load Balancer Frontend Max TLS Connections Limit Metrics",
    "description": "To retrieve frontend max TLS connections limit for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_tls_connections_limit`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/frontend_tls_connections_exceeding_rate_limit",
    "method": "GET",
    "operationId": "monitoring_get_lb_frontend_tls_connections_exceeding_rate_limit",
    "summary": "Get Load Balancer Frontend Closed TLS Connections For Exceeded Rate Limit Metrics",
    "description": "To retrieve frontend closed TLS connections for exceeded rate limit for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/frontend_tls_connections_exceeding_rate_limit`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_session_duration_avg",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_session_duration_avg",
    "summary": "Get Load Balancer Droplets Average HTTP Session Duration Metrics",
    "description": "To retrieve Droplets average HTTP session duration in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_session_duration_avg`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_session_duration_50p",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_session_duration_50p",
    "summary": "Get Load Balancer Droplets 50th Percentile HTTP Session Duration Metrics",
    "description": "To retrieve Droplets 50th percentile HTTP session duration in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_session_duration_50p`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_session_duration_95p",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_session_duration_95p",
    "summary": "Get Load Balancer Droplets 95th Percentile HTTP Session Duration Metrics",
    "description": "To retrieve Droplets 95th percentile HTTP session duration in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_session_duration_95p`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_response_time_avg",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_response_time_avg",
    "summary": "Get Load Balancer Droplets Average HTTP Response Time Metrics",
    "description": "To retrieve Droplets average HTTP response time in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_response_time_avg`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_response_time_50p",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_response_time_50p",
    "summary": "Get Load Balancer Droplets 50th Percentile HTTP Response Time Metrics",
    "description": "To retrieve Droplets 50th percentile HTTP response time in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_response_time_50p`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_response_time_95p",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_response_time_95p",
    "summary": "Get Load Balancer Droplets 95th Percentile HTTP Response Time Metrics",
    "description": "To retrieve Droplets 95th percentile HTTP response time in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_response_time_95p`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_response_time_99p",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_response_time_99p",
    "summary": "Get Load Balancer Droplets 99th Percentile HTTP Response Time Metrics",
    "description": "To retrieve Droplets 99th percentile HTTP response time in seconds for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_response_time_99p`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_queue_size",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_queue_size",
    "summary": "Get Load Balancer Droplets Queue Size Metrics",
    "description": "To retrieve Droplets queue size for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_queue_size`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_http_responses",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_http_responses",
    "summary": "Get Load Balancer Droplets HTTP Rate Of Response Code Metrics",
    "description": "To retrieve Droplets HTTP rate of response code for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_http_responses`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_connections",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_connections",
    "summary": "Get Load Balancer Droplets Active Connections Metrics",
    "description": "To retrieve Droplets active connections for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_connections`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_health_checks",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_health_checks",
    "summary": "Get Load Balancer Droplets Health Check Status Metrics",
    "description": "To retrieve Droplets health check status for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_health_checks`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/load_balancer/droplets_downtime",
    "method": "GET",
    "operationId": "monitoring_get_lb_droplets_downtime",
    "summary": "Get Load Balancer Droplets Downtime Status Metrics",
    "description": "To retrieve Droplets downtime status for a given load balancer, send a GET request to `/v2/monitoring/metrics/load_balancer/droplets_downtime`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet_autoscale/current_instances",
    "method": "GET",
    "operationId": "monitoring_get_droplet_autoscale_current_instances",
    "summary": "Get Droplet Autoscale Pool Current Size",
    "description": "To retrieve the current size for a given Droplet Autoscale Pool, send a GET request to `/v2/monitoring/metrics/droplet_autoscale/current_instances`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet_autoscale/target_instances",
    "method": "GET",
    "operationId": "monitoring_get_droplet_autoscale_target_instances",
    "summary": "Get Droplet Autoscale Pool Target Size",
    "description": "To retrieve the target size for a given Droplet Autoscale Pool, send a GET request to `/v2/monitoring/metrics/droplet_autoscale/target_instances`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet_autoscale/current_cpu_utilization",
    "method": "GET",
    "operationId": "monitoring_get_droplet_autoscale_current_cpu_utilization.yml",
    "summary": "Get Droplet Autoscale Pool Current Average CPU utilization",
    "description": "To retrieve the current average CPU utilization for a given Droplet Autoscale Pool, send a GET request to `/v2/monitoring/metrics/droplet_autoscale/current_cpu_utilization`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet_autoscale/target_cpu_utilization",
    "method": "GET",
    "operationId": "monitoring_get_droplet_autoscale_target_cpu_utilization",
    "summary": "Get Droplet Autoscale Pool Target Average CPU utilization",
    "description": "To retrieve the target average CPU utilization for a given Droplet Autoscale Pool, send a GET request to `/v2/monitoring/metrics/droplet_autoscale/target_cpu_utilization`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet_autoscale/current_memory_utilization",
    "method": "GET",
    "operationId": "monitoring_get_droplet_autoscale_current_memory_utilization",
    "summary": "Get Droplet Autoscale Pool Current Average Memory utilization",
    "description": "To retrieve the current average memory utilization for a given Droplet Autoscale Pool, send a GET request to `/v2/monitoring/metrics/droplet_autoscale/current_memory_utilization`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/metrics/droplet_autoscale/target_memory_utilization",
    "method": "GET",
    "operationId": "monitoring_get_droplet_autoscale_target_memory_utilization",
    "summary": "Get Droplet Autoscale Pool Target Average Memory utilization",
    "description": "To retrieve the target average memory utilization for a given Droplet Autoscale Pool, send a GET request to `/v2/monitoring/metrics/droplet_autoscale/target_memory_utilization`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/destinations",
    "method": "POST",
    "operationId": "monitoring_create_destination",
    "summary": "Create Logging Destination",
    "description": "To create a new destination, send a POST request to `/v2/monitoring/sinks/destinations`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/destinations",
    "method": "GET",
    "operationId": "monitoring_list_destinations",
    "summary": "List Logging Destinations",
    "description": "To list all logging destinations, send a GET request to `/v2/monitoring/sinks/destinations`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/destinations/{destination_uuid}",
    "method": "GET",
    "operationId": "monitoring_get_destination",
    "summary": "Get Logging Destination",
    "description": "To get the details of a destination, send a GET request to `/v2/monitoring/sinks/destinations/${destination_uuid}`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/destinations/{destination_uuid}",
    "method": "POST",
    "operationId": "monitoring_update_destination",
    "summary": "Update Logging Destination",
    "description": "To update the details of a destination, send a PATCH request to `/v2/monitoring/sinks/destinations/${destination_uuid}`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/destinations/{destination_uuid}",
    "method": "DELETE",
    "operationId": "monitoring_delete_destination",
    "summary": "Delete Logging Destination",
    "description": "To delete a destination and all associated sinks, send a DELETE request to `/v2/monitoring/sinks/destinations/${destination_uuid}`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks",
    "method": "POST",
    "operationId": "monitoring_create_sink",
    "summary": "Create Sink",
    "description": "To create a new sink, send a POST request to `/v2/monitoring/sinks`. Forwards logs from the \nresources identified in `resources` to the specified pre-existing destination.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks",
    "method": "GET",
    "operationId": "monitoring_list_sinks",
    "summary": "Lists all sinks",
    "description": "To list all sinks, send a GET request to `/v2/monitoring/sinks`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/{sink_uuid}",
    "method": "GET",
    "operationId": "monitoring_get_sink",
    "summary": "Get Sink",
    "description": "To get the details of a sink (resources and destination), send a GET request to `/v2/monitoring/sinks/${sink_uuid}`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/monitoring/sinks/{sink_uuid}",
    "method": "DELETE",
    "operationId": "monitoring_delete_sink",
    "summary": "Delete Sink",
    "description": "To delete a sink, send a DELETE request to `/v2/monitoring/sinks/${sink_uuid}`.",
    "tags": [
      "Monitoring"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments",
    "method": "GET",
    "operationId": "partnerAttachments_list",
    "summary": "List all partner attachments",
    "description": "To list all of the Partner Attachments on your account, send a `GET` request to `/v2/partner_network_connect/attachments`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments",
    "method": "POST",
    "operationId": "partnerAttachments_create",
    "summary": "Create a new partner attachment",
    "description": "To create a new partner attachment, send a `POST` request to\n`/v2/partner_network_connect/attachments` with a JSON object containing the\nrequired configuration details.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}",
    "method": "GET",
    "operationId": "partnerAttachments_get",
    "summary": "Retrieve an existing partner attachment",
    "description": "To get the details of a partner attachment, send a `GET` request to\n`/v2/partner_network_connect/attachments/{pa_id}`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}",
    "method": "PATCH",
    "operationId": "partnerAttachments_patch",
    "summary": "Update an existing partner attachment",
    "description": "To update an existing partner attachment, send a `PATCH` request to\n`/v2/partner_network_connect/attachments/{pa_id}` with a JSON object containing the\nfields to be updated.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}",
    "method": "DELETE",
    "operationId": "partnerAttachments_delete",
    "summary": "Delete an existing partner attachment",
    "description": "To delete an existing partner attachment, send a `DELETE` request to\n`/v2/partner_network_connect/attachments/{pa_id}`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}/bgp_auth_key",
    "method": "GET",
    "operationId": "partnerAttachments_get_bgp_auth_key",
    "summary": "Get current BGP auth key for the partner attachment",
    "description": "To get the current BGP auth key for a partner attachment, send a `GET` request to\n`/v2/partner_network_connect/attachments/{pa_id}/bgp_auth_key`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}/remote_routes",
    "method": "GET",
    "operationId": "partnerAttachments_list_remote_routes",
    "summary": "List remote routes for a partner attachment",
    "description": "To list all remote routes associated with a partner attachment, send a `GET` request to\n`/v2/partner_network_connect/attachments/{pa_id}/remote_routes`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}/remote_routes",
    "method": "PUT",
    "operationId": "partnerAttachments_update_remote_routes",
    "summary": "Set remote routes for a partner attachment",
    "description": "To set remote routes for a partner attachment, send a `PUT` request to\n`/v2/partner_network_connect/attachments/{pa_id}/remote_routes` with a JSON object\ncontaining the remote routes to be set.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}/service_key",
    "method": "GET",
    "operationId": "partnerAttachments_get_service_key",
    "summary": "Get the current service key for the partner attachment",
    "description": "To get the current service key for a partner attachment, send a `GET` request to\n`/v2/partner_network_connect/attachments/{pa_id}/service_key`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/partner_network_connect/attachments/{pa_id}/service_key",
    "method": "POST",
    "operationId": "partnerAttachments_create_service_key",
    "summary": "Regenerate the service key for the partner attachment",
    "description": "This operation generates a new service key for the specified partner attachment. The operation is asynchronous, and the response is an empty JSON object returned with a 202 status code. To poll for the new service key, send a `GET` request to `/v2/partner_network_connect/attachments/{pa_id}/service_key`.",
    "tags": [
      "Partner Network Connect"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects",
    "method": "GET",
    "operationId": "projects_list",
    "summary": "List All Projects",
    "description": "To list all your projects, send a GET request to `/v2/projects`.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects",
    "method": "POST",
    "operationId": "projects_create",
    "summary": "Create a Project",
    "description": "To create a project, send a POST request to `/v2/projects`.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/default",
    "method": "GET",
    "operationId": "projects_get_default",
    "summary": "Retrieve the Default Project",
    "description": "To get your default project, send a GET request to `/v2/projects/default`.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/default",
    "method": "PUT",
    "operationId": "projects_update_default",
    "summary": "Update the Default Project",
    "description": "To update you default project, send a PUT request to `/v2/projects/default`. All of the following attributes must be sent.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/default",
    "method": "PATCH",
    "operationId": "projects_patch_default",
    "summary": "Patch the Default Project",
    "description": "To update only specific attributes of your default project, send a PATCH request to `/v2/projects/default`. At least one of the following attributes needs to be sent.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/{project_id}",
    "method": "GET",
    "operationId": "projects_get",
    "summary": "Retrieve an Existing Project",
    "description": "To get a project, send a GET request to `/v2/projects/$PROJECT_ID`.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/{project_id}",
    "method": "PUT",
    "operationId": "projects_update",
    "summary": "Update a Project",
    "description": "To update a project, send a PUT request to `/v2/projects/$PROJECT_ID`. All of the following attributes must be sent.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/{project_id}",
    "method": "PATCH",
    "operationId": "projects_patch",
    "summary": "Patch a Project",
    "description": "To update only specific attributes of a project, send a PATCH request to `/v2/projects/$PROJECT_ID`. At least one of the following attributes needs to be sent.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/{project_id}",
    "method": "DELETE",
    "operationId": "projects_delete",
    "summary": "Delete an Existing Project",
    "description": "To delete a project, send a DELETE request to `/v2/projects/$PROJECT_ID`. To\nbe deleted, a project must not have any resources assigned to it. Any existing\nresources must first be reassigned or destroyed, or you will receive a 412 error.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Projects"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/{project_id}/resources",
    "method": "GET",
    "operationId": "projects_list_resources",
    "summary": "List Project Resources",
    "description": "To list all your resources in a project, send a GET request to `/v2/projects/$PROJECT_ID/resources`.",
    "tags": [
      "Project Resources"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/{project_id}/resources",
    "method": "POST",
    "operationId": "projects_assign_resources",
    "summary": "Assign Resources to a Project",
    "description": "To assign resources to a project, send a POST request to `/v2/projects/$PROJECT_ID/resources`.",
    "tags": [
      "Project Resources"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/default/resources",
    "method": "GET",
    "operationId": "projects_list_resources_default",
    "summary": "List Default Project Resources",
    "description": "To list all your resources in your default project, send a GET request to `/v2/projects/default/resources`.",
    "tags": [
      "Project Resources"
    ],
    "parameters": []
  },
  {
    "path": "/v2/projects/default/resources",
    "method": "POST",
    "operationId": "projects_assign_resources_default",
    "summary": "Assign Resources to Default Project",
    "description": "To assign resources to your default project, send a POST request to `/v2/projects/default/resources`.",
    "tags": [
      "Project Resources"
    ],
    "parameters": []
  },
  {
    "path": "/v2/regions",
    "method": "GET",
    "operationId": "regions_list",
    "summary": "List All Data Center Regions",
    "description": "To list all of the regions that are available, send a GET request to `/v2/regions`.\nThe response will be a JSON object with a key called `regions`. The value of this will be an array of `region` objects, each of which will contain the standard region attributes.",
    "tags": [
      "Regions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries",
    "method": "GET",
    "operationId": "registries_list",
    "summary": "[Public Preview] List All Container Registries",
    "description": "To get information about any container registry in your account, send a GET request to `/v2/registries/`.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries",
    "method": "POST",
    "operationId": "registries_create",
    "summary": "[Public Preview] Create Container Registry",
    "description": "To create your container registry, send a POST request to `/v2/registries`.\n\nThe `name` becomes part of the URL for images stored in the registry. For\nexample, if your registry is called `example`, an image in it will have the\nURL `registry.digitalocean.com/example/image:tag`.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}",
    "method": "GET",
    "operationId": "registries_get",
    "summary": "[Public Preview] Get a Container Registry By Name",
    "description": "To get information about any container registry in your account, send a GET request to `/v2/registries/{registry_name}`.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}",
    "method": "DELETE",
    "operationId": "registries_delete",
    "summary": "[Public Preview] Delete Container Registry By Name",
    "description": "To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registries/{registry_name}`.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/docker-credentials",
    "method": "GET",
    "operationId": "registries_get_dockerCredentials",
    "summary": "[Public Preview] Get Docker Credentials By Registry Name",
    "description": "In order to access your container registry with the Docker client or from a\nKubernetes cluster, you will need to configure authentication. The necessary\nJSON configuration can be retrieved by sending a GET request to\n`/v2/registries/{registry_name}/docker-credentials`.\n\nThe response will be in the format of a Docker `config.json` file. To use the\nconfig in your Kubernetes cluster, create a Secret with:\n\n    kubectl create secret generic docr \\\n      --from-file=.dockerconfigjson=config.json \\\n      --type=kubernetes.io/dockerconfigjson\n\nBy default, the returned credentials have read-only access to your registry\nand cannot be used to push images. This is appropriate for most Kubernetes\nclusters. To retrieve read/write credentials, suitable for use with the Docker\nclient or in a CI system, read_write may be provided as query parameter. For\nexample: `/v2/registries/{registry_name}/docker-credentials?read_write=true`\n\nBy default, the returned credentials will not expire. To retrieve credentials\nwith an expiry set, expiry_seconds may be provided as a query parameter. For\nexample: `/v2/registries/{registry_name}/docker-credentials?expiry_seconds=3600` will return\ncredentials that expire after one hour.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/subscription",
    "method": "GET",
    "operationId": "registries_get_subscription",
    "summary": "[Public Preview] Get Subscription Information",
    "description": "A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registries/subscription`. It is similar to GET `/v2/registry/subscription` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/subscription",
    "method": "POST",
    "operationId": "registries_update_subscription",
    "summary": "[Public Preview] Update Subscription Tier",
    "description": "After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registries/subscription`. It is similar to POST `/v2/registry/subscription` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/options",
    "method": "GET",
    "operationId": "registries_get_options",
    "summary": "[Public Preview] List Registry Options (Subscription Tiers and Available Regions)",
    "description": "This endpoint serves to provide additional information as to which option values are available when creating a container registry.\nThere are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.\nThere are multiple regions available for container registry and controls where your data is stored.\nTo list the available options, send a GET request to `/v2/registries/options`. This is similar to GET `/v2/registry/options` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/garbage-collection",
    "method": "GET",
    "operationId": "registries_get_garbageCollection",
    "summary": "[Public Preview] Get Active Garbage Collection",
    "description": "To get information about the currently-active garbage collection for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collection`.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/garbage-collection",
    "method": "POST",
    "operationId": "registries_run_garbageCollection",
    "summary": "[Public Preview] Start Garbage Collection",
    "description": "Garbage collection enables users to clear out unreferenced blobs (layer &\nmanifest data) after deleting one or more manifests from a repository. If\nthere are no unreferenced blobs resulting from the deletion of one or more\nmanifests, garbage collection is effectively a noop.\n[See here for more information](https://docs.digitalocean.com/products/container-registry/how-to/clean-up-container-registry/)\nabout how and why you should clean up your container registry periodically.\n\nTo request a garbage collection run on your registry, send a POST request to\n`/v2/registries/$REGISTRY_NAME/garbage-collection`. This will initiate the\nfollowing sequence of events on your registry.\n\n* Set the registry to read-only mode, meaning no further write-scoped\n  JWTs will be issued to registry clients. Existing write-scoped JWTs will\n  continue to work until they expire which can take up to 15 minutes.\n* Wait until all existing write-scoped JWTs have expired.\n* Scan all registry manifests to determine which blobs are unreferenced.\n* Delete all unreferenced blobs from the registry.\n* Record the number of blobs deleted and bytes freed, mark the garbage\n  collection status as `success`.\n* Remove the read-only mode restriction from the registry, meaning write-scoped\n  JWTs will once again be issued to registry clients.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/garbage-collections",
    "method": "GET",
    "operationId": "registries_list_garbageCollections",
    "summary": "[Public Preview] List Garbage Collections",
    "description": "To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/garbage-collection/{garbage_collection_uuid}",
    "method": "PUT",
    "operationId": "registries_update_garbageCollection",
    "summary": "[Public Preview] Update Garbage Collection",
    "description": "To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registries/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below. It is similar to PUT `/v2/registries/$REGISTRY_NAME/garbage-collection/$GC_UUID` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/repositoriesV2",
    "method": "GET",
    "operationId": "registries_list_repositoriesV2",
    "summary": "[Public Preview] List All Container Registry Repositories (V2)",
    "description": "To list all repositories in your container registry, send a GET request to `/v2/registries/$REGISTRY_NAME/repositoriesV2`. It is similar to GET `/v2/registry/$REGISTRY_NAME/repositoriesV2` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/repositories/{repository_name}",
    "method": "DELETE",
    "operationId": "registries_delete_repository",
    "summary": "[Public Preview] Delete Container Registry Repository",
    "description": "To delete a container repository including all of its tags, send a DELETE request to\n`/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/repositories/{repository_name}/tags",
    "method": "GET",
    "operationId": "registries_list_repositoryTags",
    "summary": "[Public Preview] List All Container Registry Repository Tags",
    "description": "To list all tags in one of your container registry's repository, send a GET\nrequest to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to list tags for\n`registry.digitalocean.com/example/my/repo`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/tags`. \n\nIt is similar to GET `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/repositories/{repository_name}/tags/{repository_tag}",
    "method": "DELETE",
    "operationId": "registries_delete_repositoryTag",
    "summary": "[Public Preview] Delete Container Registry Repository Tag",
    "description": "To delete a container repository tag in on of our container registries, send a DELETE request to\n`/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to delete\n`registry.digitalocean.com/example/my/repo:mytag`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/tags/mytag`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully. It is similar to DELETE `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/repositories/{repository_name}/digests",
    "method": "GET",
    "operationId": "registries_list_repositoryManifests",
    "summary": "[Public Preview] List All Container Registry Repository Manifests",
    "description": "To list all manifests in your container registry repository, send a GET\nrequest to `/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to list manifests for\n`registry.digitalocean.com/example/my/repo`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/digests`.\n\nIt is similar to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/{registry_name}/repositories/{repository_name}/digests/{manifest_digest}",
    "method": "DELETE",
    "operationId": "registries_delete_repositoryManifest",
    "summary": "[Public Preview] Delete Container Registry Repository Manifest",
    "description": "To delete a container repository manifest by digest in one of your registries, send a DELETE request to\n`/v2/registries/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to delete\n`registry.digitalocean.com/example/my/repo@sha256:abcd`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/digests/sha256:abcd`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n\nIt is similar to DELETE `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registries/validate-name",
    "method": "POST",
    "operationId": "registries_validate_name",
    "summary": "[Public Preview] Validate a Container Registry Name",
    "description": "To validate that a container registry name is available for use, send a POST\nrequest to `/v2/registries/validate-name`.\n\nIf the name is both formatted correctly and available, the response code will\nbe 204 and contain no body. If the name is already in use, the response will\nbe a 409 Conflict. \n\nIt is similar to `/v2/registry/validate-name` and exists for backward compatibility.",
    "tags": [
      "Container Registries"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry",
    "method": "GET",
    "operationId": "registry_get",
    "summary": "Get Container Registry Information",
    "description": "To get information about your container registry, send a GET request to `/v2/registry`.\nThis operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry",
    "method": "POST",
    "operationId": "registry_create",
    "summary": "Create Container Registry",
    "description": "To create your container registry, send a POST request to `/v2/registry`.\n\nThe `name` becomes part of the URL for images stored in the registry. For\nexample, if your registry is called `example`, an image in it will have the\nURL `registry.digitalocean.com/example/image:tag`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry",
    "method": "DELETE",
    "operationId": "registry_delete",
    "summary": "Delete Container Registry",
    "description": "To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registry`.\nThis operation is not compatible with multiple registries in a DO account. You should use `/v2/registries/{registry_name}` instead.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/subscription",
    "method": "GET",
    "operationId": "registry_get_subscription",
    "summary": "Get Subscription Information",
    "description": "A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registry/subscription`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/subscription",
    "method": "POST",
    "operationId": "registry_update_subscription",
    "summary": "Update Subscription Tier",
    "description": "After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registry/subscription`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/docker-credentials",
    "method": "GET",
    "operationId": "registry_get_dockerCredentials",
    "summary": "Get Docker Credentials for Container Registry",
    "description": "In order to access your container registry with the Docker client or from a\nKubernetes cluster, you will need to configure authentication. The necessary\nJSON configuration can be retrieved by sending a GET request to\n`/v2/registry/docker-credentials`.\n\nThe response will be in the format of a Docker `config.json` file. To use the\nconfig in your Kubernetes cluster, create a Secret with:\n\n    kubectl create secret generic docr \\\n      --from-file=.dockerconfigjson=config.json \\\n      --type=kubernetes.io/dockerconfigjson\n\nBy default, the returned credentials have read-only access to your registry\nand cannot be used to push images. This is appropriate for most Kubernetes\nclusters. To retrieve read/write credentials, suitable for use with the Docker\nclient or in a CI system, read_write may be provided as query parameter. For\nexample: `/v2/registry/docker-credentials?read_write=true`\n\nBy default, the returned credentials will not expire. To retrieve credentials\nwith an expiry set, expiry_seconds may be provided as a query parameter. For\nexample: `/v2/registry/docker-credentials?expiry_seconds=3600` will return\ncredentials that expire after one hour.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/validate-name",
    "method": "POST",
    "operationId": "registry_validate_name",
    "summary": "Validate a Container Registry Name",
    "description": "To validate that a container registry name is available for use, send a POST\nrequest to `/v2/registry/validate-name`.\n\nIf the name is both formatted correctly and available, the response code will\nbe 204 and contain no body. If the name is already in use, the response will\nbe a 409 Conflict.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/repositories",
    "method": "GET",
    "operationId": "registry_list_repositories",
    "summary": "List All Container Registry Repositories",
    "description": "This endpoint has been deprecated in favor of the _List All Container Registry Repositories [V2]_ endpoint.\n\nTo list all repositories in your container registry, send a GET\nrequest to `/v2/registry/$REGISTRY_NAME/repositories`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/repositoriesV2",
    "method": "GET",
    "operationId": "registry_list_repositoriesV2",
    "summary": "List All Container Registry Repositories (V2)",
    "description": "To list all repositories in your container registry, send a GET request to `/v2/registry/$REGISTRY_NAME/repositoriesV2`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/repositories/{repository_name}/tags",
    "method": "GET",
    "operationId": "registry_list_repositoryTags",
    "summary": "List All Container Registry Repository Tags",
    "description": "To list all tags in your container registry repository, send a GET\nrequest to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to list tags for\n`registry.digitalocean.com/example/my/repo`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/tags`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/repositories/{repository_name}/tags/{repository_tag}",
    "method": "DELETE",
    "operationId": "registry_delete_repositoryTag",
    "summary": "Delete Container Registry Repository Tag",
    "description": "To delete a container repository tag, send a DELETE request to\n`/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to delete\n`registry.digitalocean.com/example/my/repo:mytag`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/tags/mytag`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/repositories/{repository_name}/digests",
    "method": "GET",
    "operationId": "registry_list_repositoryManifests",
    "summary": "List All Container Registry Repository Manifests",
    "description": "To list all manifests in your container registry repository, send a GET\nrequest to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to list manifests for\n`registry.digitalocean.com/example/my/repo`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/digests`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/repositories/{repository_name}/digests/{manifest_digest}",
    "method": "DELETE",
    "operationId": "registry_delete_repositoryManifest",
    "summary": "Delete Container Registry Repository Manifest",
    "description": "To delete a container repository manifest by digest, send a DELETE request to\n`/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to delete\n`registry.digitalocean.com/example/my/repo@sha256:abcd`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/digests/sha256:abcd`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/garbage-collection",
    "method": "POST",
    "operationId": "registry_run_garbageCollection",
    "summary": "Start Garbage Collection",
    "description": "Garbage collection enables users to clear out unreferenced blobs (layer &\nmanifest data) after deleting one or more manifests from a repository. If\nthere are no unreferenced blobs resulting from the deletion of one or more\nmanifests, garbage collection is effectively a noop.\n[See here for more information](https://docs.digitalocean.com/products/container-registry/how-to/clean-up-container-registry/)\nabout how and why you should clean up your container registry periodically.\n\nTo request a garbage collection run on your registry, send a POST request to\n`/v2/registry/$REGISTRY_NAME/garbage-collection`. This will initiate the\nfollowing sequence of events on your registry.\n\n* Set the registry to read-only mode, meaning no further write-scoped\n  JWTs will be issued to registry clients. Existing write-scoped JWTs will\n  continue to work until they expire which can take up to 15 minutes.\n* Wait until all existing write-scoped JWTs have expired.\n* Scan all registry manifests to determine which blobs are unreferenced.\n* Delete all unreferenced blobs from the registry.\n* Record the number of blobs deleted and bytes freed, mark the garbage\n  collection status as `success`.\n* Remove the read-only mode restriction from the registry, meaning write-scoped\n  JWTs will once again be issued to registry clients.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/garbage-collection",
    "method": "GET",
    "operationId": "registry_get_garbageCollection",
    "summary": "Get Active Garbage Collection",
    "description": "To get information about the currently-active garbage collection for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collection`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/garbage-collections",
    "method": "GET",
    "operationId": "registry_list_garbageCollections",
    "summary": "List Garbage Collections",
    "description": "To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid}",
    "method": "PUT",
    "operationId": "registry_update_garbageCollection",
    "summary": "Update Garbage Collection",
    "description": "To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registry/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/registry/options",
    "method": "GET",
    "operationId": "registry_get_options",
    "summary": "List Registry Options (Subscription Tiers and Available Regions)",
    "description": "This endpoint serves to provide additional information as to which option values are available when creating a container registry.\nThere are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.\nThere are multiple regions available for container registry and controls where your data is stored.\nTo list the available options, send a GET request to `/v2/registry/options`.",
    "tags": [
      "Container Registry"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reports/droplet_neighbors_ids",
    "method": "GET",
    "operationId": "droplets_list_neighborsIds",
    "summary": "List All Droplet Neighbors",
    "description": "To retrieve a list of all Droplets that are co-located on the same physical\nhardware, send a GET request to `/v2/reports/droplet_neighbors_ids`.\n\nThe results will be returned as a JSON object with a key of `neighbor_ids`.\nThis will be set to an array of arrays. Each array will contain a set of\nDroplet IDs for Droplets that share a physical server. An empty array\nindicates that all Droplets associated with your account are located on\nseparate physical hardware.",
    "tags": [
      "Droplets"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips",
    "method": "GET",
    "operationId": "reservedIPs_list",
    "summary": "List All Reserved IPs",
    "description": "To list all of the reserved IPs available on your account, send a GET request to `/v2/reserved_ips`.",
    "tags": [
      "Reserved IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips",
    "method": "POST",
    "operationId": "reservedIPs_create",
    "summary": "Create a New Reserved IP",
    "description": "On creation, a reserved IP must be either assigned to a Droplet or reserved to a region.\n* To create a new reserved IP assigned to a Droplet, send a POST\n  request to `/v2/reserved_ips` with the `droplet_id` attribute.\n\n* To create a new reserved IP reserved to a region, send a POST request to\n  `/v2/reserved_ips` with the `region` attribute.\n\n**Note**:  In addition to the standard rate limiting, only 12 reserved IPs may be created per 60 seconds.",
    "tags": [
      "Reserved IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips/{reserved_ip}",
    "method": "GET",
    "operationId": "reservedIPs_get",
    "summary": "Retrieve an Existing Reserved IP",
    "description": "To show information about a reserved IP, send a GET request to `/v2/reserved_ips/$RESERVED_IP_ADDR`.",
    "tags": [
      "Reserved IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips/{reserved_ip}",
    "method": "DELETE",
    "operationId": "reservedIPs_delete",
    "summary": "Delete a Reserved IP",
    "description": "To delete a reserved IP and remove it from your account, send a DELETE request\nto `/v2/reserved_ips/$RESERVED_IP_ADDR`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "Reserved IPs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips/{reserved_ip}/actions",
    "method": "GET",
    "operationId": "reservedIPsActions_list",
    "summary": "List All Actions for a Reserved IP",
    "description": "To retrieve all actions that have been executed on a reserved IP, send a GET request to `/v2/reserved_ips/$RESERVED_IP/actions`.",
    "tags": [
      "Reserved IP Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips/{reserved_ip}/actions",
    "method": "POST",
    "operationId": "reservedIPsActions_post",
    "summary": "Initiate a Reserved IP Action",
    "description": "To initiate an action on a reserved IP send a POST request to\n`/v2/reserved_ips/$RESERVED_IP/actions`. In the JSON body to the request,\nset the `type` attribute to on of the supported action types:\n\n| Action     | Details\n|------------|--------\n| `assign`   | Assigns a reserved IP to a Droplet\n| `unassign` | Unassign a reserved IP from a Droplet",
    "tags": [
      "Reserved IP Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ips/{reserved_ip}/actions/{action_id}",
    "method": "GET",
    "operationId": "reservedIPsActions_get",
    "summary": "Retrieve an Existing Reserved IP Action",
    "description": "To retrieve the status of a reserved IP action, send a GET request to `/v2/reserved_ips/$RESERVED_IP/actions/$ACTION_ID`.",
    "tags": [
      "Reserved IP Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ipv6",
    "method": "GET",
    "operationId": "reservedIPv6_list",
    "summary": "[Public Preview] List All Reserved IPv6s",
    "description": "To list all of the reserved IPv6s available on your account, send a GET request to `/v2/reserved_ipv6`.",
    "tags": [
      "[Public Preview] Reserved IPv6"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ipv6",
    "method": "POST",
    "operationId": "reservedIPv6_create",
    "summary": "[Public Preview] Create a New Reserved IPv6",
    "description": "On creation, a reserved IPv6 must be reserved to a region.\n* To create a new reserved IPv6 reserved to a region, send a POST request to\n  `/v2/reserved_ipv6` with the `region_slug` attribute.",
    "tags": [
      "[Public Preview] Reserved IPv6"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ipv6/{reserved_ipv6}",
    "method": "GET",
    "operationId": "reservedIPv6_get",
    "summary": "[Public Preview] Retrieve an Existing Reserved IPv6",
    "description": "To show information about a reserved IPv6, send a GET request to `/v2/reserved_ipv6/$RESERVED_IPV6`.",
    "tags": [
      "[Public Preview] Reserved IPv6"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ipv6/{reserved_ipv6}",
    "method": "DELETE",
    "operationId": "reservedIPv6_delete",
    "summary": "[Public Preview] Delete a Reserved IPv6",
    "description": "To delete a reserved IP and remove it from your account, send a DELETE request\nto `/v2/reserved_ipv6/$RESERVED_IPV6`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.",
    "tags": [
      "[Public Preview] Reserved IPv6"
    ],
    "parameters": []
  },
  {
    "path": "/v2/reserved_ipv6/{reserved_ipv6}/actions",
    "method": "POST",
    "operationId": "reservedIPv6Actions_post",
    "summary": "[Public Preview] Initiate a Reserved IPv6 Action",
    "description": "To initiate an action on a reserved IPv6 send a POST request to\n`/v2/reserved_ipv6/$RESERVED_IPV6/actions`. In the JSON body to the request,\nset the `type` attribute to on of the supported action types:\n\n| Action     | Details\n|------------|--------\n| `assign`   | Assigns a reserved IPv6 to a Droplet\n| `unassign` | Unassign a reserved IPv6 from a Droplet",
    "tags": [
      "[Public Preview] Reserved IPv6 Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/sizes",
    "method": "GET",
    "operationId": "sizes_list",
    "summary": "List All Droplet Sizes",
    "description": "To list all of available Droplet sizes, send a GET request to `/v2/sizes`.\nThe response will be a JSON object with a key called `sizes`. The value of this will be an array of `size` objects each of which contain the standard size attributes.",
    "tags": [
      "Sizes"
    ],
    "parameters": []
  },
  {
    "path": "/v2/snapshots",
    "method": "GET",
    "operationId": "snapshots_list",
    "summary": "List All Snapshots",
    "description": "To list all of the snapshots available on your account, send a GET request to\n`/v2/snapshots`.\n\nThe response will be a JSON object with a key called `snapshots`. This will be\nset to an array of `snapshot` objects, each of which will contain the standard\nsnapshot attributes.\n\n### Filtering Results by Resource Type\n\nIt's possible to request filtered results by including certain query parameters.\n\n#### List Droplet Snapshots\n\nTo retrieve only snapshots based on Droplets, include the `resource_type`\nquery parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.\n\n#### List Volume Snapshots\n\nTo retrieve only snapshots based on volumes, include the `resource_type`\nquery parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.",
    "tags": [
      "Snapshots"
    ],
    "parameters": []
  },
  {
    "path": "/v2/snapshots/{snapshot_id}",
    "method": "GET",
    "operationId": "snapshots_get",
    "summary": "Retrieve an Existing Snapshot",
    "description": "To retrieve information about a snapshot, send a GET request to\n`/v2/snapshots/$SNAPSHOT_ID`.\n\nThe response will be a JSON object with a key called `snapshot`. The value of\nthis will be an snapshot object containing the standard snapshot attributes.",
    "tags": [
      "Snapshots"
    ],
    "parameters": []
  },
  {
    "path": "/v2/snapshots/{snapshot_id}",
    "method": "DELETE",
    "operationId": "snapshots_delete",
    "summary": "Delete a Snapshot",
    "description": "Both Droplet and volume snapshots are managed through the `/v2/snapshots/`\nendpoint. To delete a snapshot, send a DELETE request to\n`/v2/snapshots/$SNAPSHOT_ID`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.",
    "tags": [
      "Snapshots"
    ],
    "parameters": []
  },
  {
    "path": "/v2/spaces/keys",
    "method": "GET",
    "operationId": "spacesKey_list",
    "summary": "List Spaces Access Keys",
    "description": "To list Spaces Access Key, send a GET request to `/v2/spaces/keys`. Sort parameter must be used with Sort Direction.",
    "tags": [
      "Spaces Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/spaces/keys",
    "method": "POST",
    "operationId": "spacesKey_create",
    "summary": "Create a New Spaces Access Key",
    "description": "To create a new Spaces Access Key, send a POST request to `/v2/spaces/keys`.\nAt the moment, you cannot mix a fullaccess permission with scoped permissions.\nA fullaccess permission will be prioritized if fullaccess and scoped permissions are both added.",
    "tags": [
      "Spaces Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/spaces/keys/{access_key}",
    "method": "GET",
    "operationId": "spacesKey_get",
    "summary": "Get a Spaces Access Key",
    "description": "To get a Spaces Access Key, send a GET request to `/v2/spaces/keys/$ACCESS_KEY`.\n\nA successful request will return the Access Key.",
    "tags": [
      "Spaces Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/spaces/keys/{access_key}",
    "method": "DELETE",
    "operationId": "spacesKey_delete",
    "summary": "Delete a Spaces Access Key",
    "description": "To delete a Spaces Access Key, send a DELETE request to `/v2/spaces/keys/$ACCESS_KEY`.\n\nA successful request will return a `204 No Content` status code.",
    "tags": [
      "Spaces Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/spaces/keys/{access_key}",
    "method": "PUT",
    "operationId": "spacesKey_update",
    "summary": "Update Spaces Access Keys",
    "description": "To update Spaces Access Key, send a PUT or PATCH request to `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert a\nfullaccess key to a scoped key or vice versa. You can only update the name of the key.",
    "tags": [
      "Spaces Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/spaces/keys/{access_key}",
    "method": "PATCH",
    "operationId": "spacesKey_patch",
    "summary": "Update Spaces Access Keys",
    "description": "To update Spaces Access Key, send a PUT or PATCH request to `/v2/spaces/keys/$ACCESS_KEY`. At the moment, you cannot convert a\nfullaccess key to a scoped key or vice versa. You can only update the name of the key.",
    "tags": [
      "Spaces Keys"
    ],
    "parameters": []
  },
  {
    "path": "/v2/tags",
    "method": "GET",
    "operationId": "tags_list",
    "summary": "List All Tags",
    "description": "To list all of your tags, you can send a GET request to `/v2/tags`.",
    "tags": [
      "Tags"
    ],
    "parameters": []
  },
  {
    "path": "/v2/tags",
    "method": "POST",
    "operationId": "tags_create",
    "summary": "Create a New Tag",
    "description": "To create a tag you can send a POST request to `/v2/tags` with a `name` attribute.",
    "tags": [
      "Tags"
    ],
    "parameters": []
  },
  {
    "path": "/v2/tags/{tag_id}",
    "method": "GET",
    "operationId": "tags_get",
    "summary": "Retrieve a Tag",
    "description": "To retrieve an individual tag, you can send a `GET` request to `/v2/tags/$TAG_NAME`.",
    "tags": [
      "Tags"
    ],
    "parameters": []
  },
  {
    "path": "/v2/tags/{tag_id}",
    "method": "DELETE",
    "operationId": "tags_delete",
    "summary": "Delete a Tag",
    "description": "A tag can be deleted by sending a `DELETE` request to `/v2/tags/$TAG_NAME`. Deleting a tag also untags all the resources that have previously been tagged by the Tag",
    "tags": [
      "Tags"
    ],
    "parameters": []
  },
  {
    "path": "/v2/tags/{tag_id}/resources",
    "method": "POST",
    "operationId": "tags_assign_resources",
    "summary": "Tag a Resource",
    "description": "Resources can be tagged by sending a POST request to `/v2/tags/$TAG_NAME/resources` with an array of json objects containing `resource_id` and `resource_type` attributes.\nCurrently only tagging of Droplets, Databases, Images, Volumes, and Volume Snapshots is supported. `resource_type` is expected to be the string `droplet`, `database`, `image`, `volume` or `volume_snapshot`. `resource_id` is expected to be the ID of the resource as a string.",
    "tags": [
      "Tags"
    ],
    "parameters": []
  },
  {
    "path": "/v2/tags/{tag_id}/resources",
    "method": "DELETE",
    "operationId": "tags_unassign_resources",
    "summary": "Untag a Resource",
    "description": "Resources can be untagged by sending a DELETE request to `/v2/tags/$TAG_NAME/resources` with an array of json objects containing `resource_id` and `resource_type` attributes.\nCurrently only untagging of Droplets, Databases, Images, Volumes, and Volume Snapshots is supported. `resource_type` is expected to be the string `droplet`, `database`, `image`, `volume` or `volume_snapshot`. `resource_id` is expected to be the ID of the resource as a string.",
    "tags": [
      "Tags"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes",
    "method": "GET",
    "operationId": "volumes_list",
    "summary": "List All Block Storage Volumes",
    "description": "To list all of the block storage volumes available on your account, send a GET request to `/v2/volumes`.\n## Filtering Results\n### By Region\nThe `region` may be provided as query parameter in order to restrict results to volumes available in a specific region. For example: `/v2/volumes?region=nyc1`\n### By Name\nIt is also possible to list volumes on your account that match a specified name. To do so, send a GET request with the volume's name as a query parameter to `/v2/volumes?name=$VOLUME_NAME`.\n**Note:** You can only create one volume per region with the same name.\n### By Name and Region\nIt is also possible to retrieve information about a block storage volume by name. To do so, send a GET request with the volume's name and the region slug for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes",
    "method": "POST",
    "operationId": "volumes_create",
    "summary": "Create a New Block Storage Volume",
    "description": "To create a new volume, send a POST request to `/v2/volumes`. Optionally, a `filesystem_type` attribute may be provided in order to automatically format the volume's filesystem. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to Droplets without support for auto-mounting is not recommended.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes",
    "method": "DELETE",
    "operationId": "volumes_delete_byName",
    "summary": "Delete a Block Storage Volume by Name",
    "description": "Block storage volumes may also be deleted by name by sending a DELETE request with the volume's **name** and the **region slug** for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.\nNo response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/actions",
    "method": "POST",
    "operationId": "volumeActions_post",
    "summary": "Initiate A Block Storage Action By Volume Name",
    "description": "To initiate an action on a block storage volume by Name, send a POST request to\n`~/v2/volumes/actions`. The body should contain the appropriate\nattributes for the respective action.\n\n## Attach a Block Storage Volume to a Droplet\n\n| Attribute   | Details                                                             |\n| ----------- | ------------------------------------------------------------------- |\n| type        | This must be `attach`                                               |\n| volume_name | The name of the block storage volume                                |\n| droplet_id  | Set to the Droplet's ID                                             |\n| region      | Set to the slug representing the region where the volume is located |\n\nEach volume may only be attached to a single Droplet. However, up to fifteen\nvolumes may be attached to a Droplet at a time. Pre-formatted volumes will be\nautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS\nDroplets created on or after April 26, 2018 when attached. On older Droplets,\n[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)\nis required.\n\n## Remove a Block Storage Volume from a Droplet\n\n| Attribute   | Details                                                             |\n| ----------- | ------------------------------------------------------------------- |\n| type        | This must be `detach`                                               |\n| volume_name | The name of the block storage volume                                |\n| droplet_id  | Set to the Droplet's ID                                             |\n| region      | Set to the slug representing the region where the volume is located |",
    "tags": [
      "Block Storage Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/snapshots/{snapshot_id}",
    "method": "GET",
    "operationId": "volumeSnapshots_get_byId",
    "summary": "Retrieve an Existing Volume Snapshot",
    "description": "To retrieve the details of a snapshot that has been created from a volume, send a GET request to `/v2/volumes/snapshots/$VOLUME_SNAPSHOT_ID`.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/snapshots/{snapshot_id}",
    "method": "DELETE",
    "operationId": "volumeSnapshots_delete_byId",
    "summary": "Delete a Volume Snapshot",
    "description": "To delete a volume snapshot, send a DELETE request to\n`/v2/volumes/snapshots/$VOLUME_SNAPSHOT_ID`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}",
    "method": "GET",
    "operationId": "volumes_get",
    "summary": "Retrieve an Existing Block Storage Volume",
    "description": "To show information about a block storage volume, send a GET request to `/v2/volumes/$VOLUME_ID`.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}",
    "method": "DELETE",
    "operationId": "volumes_delete",
    "summary": "Delete a Block Storage Volume",
    "description": "To delete a block storage volume, destroying all data and removing it from your account, send a DELETE request to `/v2/volumes/$VOLUME_ID`.\nNo response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}/actions",
    "method": "GET",
    "operationId": "volumeActions_list",
    "summary": "List All Actions for a Volume",
    "description": "To retrieve all actions that have been executed on a volume, send a GET request to `/v2/volumes/$VOLUME_ID/actions`.",
    "tags": [
      "Block Storage Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}/actions",
    "method": "POST",
    "operationId": "volumeActions_post_byId",
    "summary": "Initiate A Block Storage Action By Volume Id",
    "description": "To initiate an action on a block storage volume by Id, send a POST request to\n`~/v2/volumes/$VOLUME_ID/actions`. The body should contain the appropriate\nattributes for the respective action.\n\n## Attach a Block Storage Volume to a Droplet\n\n| Attribute  | Details                                                             |\n| ---------- | ------------------------------------------------------------------- |\n| type       | This must be `attach`                                               |\n| droplet_id | Set to the Droplet's ID                                             |\n| region     | Set to the slug representing the region where the volume is located |\n\nEach volume may only be attached to a single Droplet. However, up to fifteen\nvolumes may be attached to a Droplet at a time. Pre-formatted volumes will be\nautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS\nDroplets created on or after April 26, 2018 when attached. On older Droplets,\n[additional configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)\nis required.\n\n## Remove a Block Storage Volume from a Droplet\n\n| Attribute  | Details                                                             |\n| ---------- | ------------------------------------------------------------------- |\n| type       | This must be `detach`                                               |\n| droplet_id | Set to the Droplet's ID                                             |\n| region     | Set to the slug representing the region where the volume is located |\n\n## Resize a Volume\n\n| Attribute      | Details                                                             |\n| -------------- | ------------------------------------------------------------------- |\n| type           | This must be `resize`                                               |\n| size_gigabytes | The new size of the block storage volume in GiB (1024^3)            |\n| region         | Set to the slug representing the region where the volume is located |\n\nVolumes may only be resized upwards. The maximum size for a volume is 16TiB.",
    "tags": [
      "Block Storage Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}/actions/{action_id}",
    "method": "GET",
    "operationId": "volumeActions_get",
    "summary": "Retrieve an Existing Volume Action",
    "description": "To retrieve the status of a volume action, send a GET request to `/v2/volumes/$VOLUME_ID/actions/$ACTION_ID`.",
    "tags": [
      "Block Storage Actions"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}/snapshots",
    "method": "GET",
    "operationId": "volumeSnapshots_list",
    "summary": "List Snapshots for a Volume",
    "description": "To retrieve the snapshots that have been created from a volume, send a GET request to `/v2/volumes/$VOLUME_ID/snapshots`.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/volumes/{volume_id}/snapshots",
    "method": "POST",
    "operationId": "volumeSnapshots_create",
    "summary": "Create Snapshot from a Volume",
    "description": "To create a snapshot from a volume, sent a POST request to `/v2/volumes/$VOLUME_ID/snapshots`.",
    "tags": [
      "Block Storage"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs",
    "method": "GET",
    "operationId": "vpcs_list",
    "summary": "List All VPCs",
    "description": "To list all of the VPCs on your account, send a GET request to `/v2/vpcs`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs",
    "method": "POST",
    "operationId": "vpcs_create",
    "summary": "Create a New VPC",
    "description": "To create a VPC, send a POST request to `/v2/vpcs` specifying the attributes\nin the table below in the JSON body.\n\n**Note:** If you do not currently have a VPC network in a specific datacenter\nregion, the first one that you create will be set as the default for that\nregion. The default VPC for a region cannot be changed or deleted.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}",
    "method": "GET",
    "operationId": "vpcs_get",
    "summary": "Retrieve an Existing VPC",
    "description": "To show information about an existing VPC, send a GET request to `/v2/vpcs/$VPC_ID`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}",
    "method": "PUT",
    "operationId": "vpcs_update",
    "summary": "Update a VPC",
    "description": "To update information about a VPC, send a PUT request to `/v2/vpcs/$VPC_ID`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}",
    "method": "PATCH",
    "operationId": "vpcs_patch",
    "summary": "Partially Update a VPC",
    "description": "To update a subset of information about a VPC, send a PATCH request to\n`/v2/vpcs/$VPC_ID`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}",
    "method": "DELETE",
    "operationId": "vpcs_delete",
    "summary": "Delete a VPC",
    "description": "To delete a VPC, send a DELETE request to `/v2/vpcs/$VPC_ID`. A 204 status\ncode with no body will be returned in response to a successful request.\n\nThe default VPC for a region can not be deleted. Additionally, a VPC can only\nbe deleted if it does not contain any member resources. Attempting to delete\na region's default VPC or a VPC that still has members will result in a\n403 Forbidden error response.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}/members",
    "method": "GET",
    "operationId": "vpcs_list_members",
    "summary": "List the Member Resources of a VPC",
    "description": "To list all of the resources that are members of a VPC, send a GET request to\n`/v2/vpcs/$VPC_ID/members`.\n\nTo only list resources of a specific type that are members of the VPC,\nincluded a `resource_type` query parameter. For example, to only list Droplets\nin the VPC, send a GET request to `/v2/vpcs/$VPC_ID/members?resource_type=droplet`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}/peerings",
    "method": "GET",
    "operationId": "vpcs_list_peerings",
    "summary": "List the Peerings of a VPC",
    "description": "To list all of a VPC's peerings, send a GET request to\n`/v2/vpcs/$VPC_ID/peerings`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}/peerings",
    "method": "POST",
    "operationId": "vpcs_create_peerings",
    "summary": "Create a Peering with a VPC",
    "description": "To create a new VPC peering for a given VPC, send a POST request to\n`/v2/vpcs/$VPC_ID/peerings`.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpcs/{vpc_id}/peerings/{vpc_peering_id}",
    "method": "PATCH",
    "operationId": "vpcs_patch_peerings",
    "summary": "Update a VPC Peering",
    "description": "To update the name of a VPC peering in a particular VPC, send a PATCH request \nto `/v2/vpcs/$VPC_ID/peerings/$VPC_PEERING_ID` with the new `name` in the \nrequest body.",
    "tags": [
      "VPCs"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpc_peerings",
    "method": "GET",
    "operationId": "vpcPeerings_list",
    "summary": "List All VPC Peerings",
    "description": "To list all of the VPC peerings on your account, send a GET request to `/v2/vpc_peerings`.",
    "tags": [
      "VPC Peerings"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpc_peerings",
    "method": "POST",
    "operationId": "vpcPeerings_create",
    "summary": "Create a New VPC Peering",
    "description": "To create a new VPC Peering, send a POST request to `/v2/vpc_peerings` \nspecifying a name and a list of two VPC IDs to peer. The response code, 202 \nAccepted, does not indicate the success or failure of the operation, just \nthat the request has been accepted for processing.",
    "tags": [
      "VPC Peerings"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpc_peerings/{vpc_peering_id}",
    "method": "GET",
    "operationId": "vpcPeerings_get",
    "summary": "Retrieve an Existing VPC Peering",
    "description": "To show information about an existing VPC Peering, send a GET request to `/v2/vpc_peerings/$VPC_PEERING_ID`.",
    "tags": [
      "VPC Peerings"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpc_peerings/{vpc_peering_id}",
    "method": "PATCH",
    "operationId": "vpcPeerings_patch",
    "summary": "Update a VPC peering",
    "description": "To update the name of a VPC peering, send a PATCH request to `/v2/vpc_peerings/$VPC_PEERING_ID` with the new `name` in the request body.",
    "tags": [
      "VPC Peerings"
    ],
    "parameters": []
  },
  {
    "path": "/v2/vpc_peerings/{vpc_peering_id}",
    "method": "DELETE",
    "operationId": "vpcPeerings_delete",
    "summary": "Delete a VPC peering",
    "description": "To delete a VPC peering, send a DELETE request to `/v2/vpc_peerings/$VPC_PEERING_ID`.",
    "tags": [
      "VPC Peerings"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks",
    "method": "GET",
    "operationId": "uptime_list_checks",
    "summary": "List All Checks",
    "description": "To list all of the Uptime checks on your account, send a GET request to `/v2/uptime/checks`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks",
    "method": "POST",
    "operationId": "uptime_create_check",
    "summary": "Create a New Check",
    "description": "To create an Uptime check, send a POST request to `/v2/uptime/checks` specifying the attributes\nin the table below in the JSON body.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}",
    "method": "GET",
    "operationId": "uptime_get_check",
    "summary": "Retrieve an Existing Check",
    "description": "To show information about an existing check, send a GET request to `/v2/uptime/checks/$CHECK_ID`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}",
    "method": "PUT",
    "operationId": "uptime_update_check",
    "summary": "Update a Check",
    "description": "To update the settings of an Uptime check, send a PUT request to `/v2/uptime/checks/$CHECK_ID`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}",
    "method": "DELETE",
    "operationId": "uptime_delete_check",
    "summary": "Delete a Check",
    "description": "To delete an Uptime check, send a DELETE request to `/v2/uptime/checks/$CHECK_ID`. A 204 status\ncode with no body will be returned in response to a successful request.\n\n\nDeleting a check will also delete alerts associated with the check.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}/state",
    "method": "GET",
    "operationId": "uptime_get_checkState",
    "summary": "Retrieve Check State",
    "description": "To show information about an existing check's state, send a GET request to `/v2/uptime/checks/$CHECK_ID/state`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}/alerts",
    "method": "GET",
    "operationId": "uptime_list_alerts",
    "summary": "List All Alerts",
    "description": "To list all of the alerts for an Uptime check, send a GET request to `/v2/uptime/checks/$CHECK_ID/alerts`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}/alerts",
    "method": "POST",
    "operationId": "uptime_create_alert",
    "summary": "Create a New Alert",
    "description": "To create an Uptime alert, send a POST request to `/v2/uptime/checks/$CHECK_ID/alerts` specifying the attributes\nin the table below in the JSON body.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}/alerts/{alert_id}",
    "method": "GET",
    "operationId": "uptime_get_alert",
    "summary": "Retrieve an Existing Alert",
    "description": "To show information about an existing alert, send a GET request to `/v2/uptime/checks/$CHECK_ID/alerts/$ALERT_ID`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}/alerts/{alert_id}",
    "method": "PUT",
    "operationId": "uptime_update_alert",
    "summary": "Update an Alert",
    "description": "To update the settings of an Uptime alert, send a PUT request to `/v2/uptime/checks/$CHECK_ID/alerts/$ALERT_ID`.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/uptime/checks/{check_id}/alerts/{alert_id}",
    "method": "DELETE",
    "operationId": "uptime_delete_alert",
    "summary": "Delete an Alert",
    "description": "To delete an Uptime alert, send a DELETE request to `/v2/uptime/checks/$CHECK_ID/alerts/$ALERT_ID`. A 204 status\ncode with no body will be returned in response to a successful request.",
    "tags": [
      "Uptime"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/agents",
    "method": "GET",
    "operationId": "genai_list_agents",
    "summary": "List Agents",
    "description": "To list all agents, send a GET request to `/v2/gen-ai/agents`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "only_deployed",
        "in": "query",
        "required": false,
        "description": "Only list agents that are deployed.",
        "type": "boolean"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents",
    "method": "POST",
    "operationId": "genai_create_agent",
    "summary": "Create an Agent",
    "description": "To create a new agent, send a POST request to `/v2/gen-ai/agents`. The response body contains a JSON object with the newly created agent object.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/api_keys",
    "method": "GET",
    "operationId": "genai_list_agent_api_keys",
    "summary": "List Agent API Keys",
    "description": "To list all agent API keys, send a GET request to `/v2/gen-ai/agents/{agent_uuid}/api_keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/api_keys",
    "method": "POST",
    "operationId": "genai_create_agent_api_key",
    "summary": "Create an Agent API Key",
    "description": "To create an agent API key, send a POST request to `/v2/gen-ai/agents/{agent_uuid}/api_keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/api_keys/{api_key_uuid}",
    "method": "PUT",
    "operationId": "genai_update_agent_api_key",
    "summary": "Update API Key for an Agent",
    "description": "To update an agent API key, send a PUT request to `/v2/gen-ai/agents/{agent_uuid}/api_keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      },
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/api_keys/{api_key_uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_agent_api_key",
    "summary": "Delete API Key for an Agent ",
    "description": "To delete an API key for an agent, send a DELETE request to `/v2/gen-ai/agents/{agent_uuid}/api_keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for your agent.",
        "type": "string"
      },
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key for an agent.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/api_keys/{api_key_uuid}/regenerate",
    "method": "PUT",
    "operationId": "genai_regenerate_agent_api_key",
    "summary": "Regenerate API Key for an Agent",
    "description": "To regenerate an agent API key, send a PUT request to `/v2/gen-ai/agents/{agent_uuid}/api_keys/{api_key_uuid}/regenerate`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      },
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/functions",
    "method": "POST",
    "operationId": "genai_attach_agent_function",
    "summary": "Add Function Route to an Agent",
    "description": "To create a function route for an agent, send a POST request to `/v2/gen-ai/agents/{agent_uuid}/functions`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/functions/{function_uuid}",
    "method": "PUT",
    "operationId": "genai_update_agent_function",
    "summary": "Update Function Route for an Agent",
    "description": "To update the function route, send a PUT request to `/v2/gen-ai/agents/{agent_uuid}/functions/{function_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      },
      {
        "name": "function_uuid",
        "in": "path",
        "required": true,
        "description": "Function id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/functions/{function_uuid}",
    "method": "DELETE",
    "operationId": "genai_detach_agent_function",
    "summary": "Delete Function Route for an Agent",
    "description": "To delete a function route from an agent, send a DELETE request to `/v2/gen-ai/agents/{agent_uuid}/functions/{function_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "The id of the agent the function route belongs to.",
        "type": "string"
      },
      {
        "name": "function_uuid",
        "in": "path",
        "required": true,
        "description": "The function route to be destroyed. This does not destroy the function itself.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/knowledge_bases",
    "method": "POST",
    "operationId": "genai_attach_knowledge_bases",
    "summary": "Attach Knowledge Bases to an Agent",
    "description": "To attach knowledge bases to an agent, send a POST request to `/v2/gen-ai/agents/{agent_uuid}/knowledge_bases`",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for an agent.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/knowledge_bases/{knowledge_base_uuid}",
    "method": "POST",
    "operationId": "genai_attach_knowledge_base",
    "summary": "Attach Knowledge Base to an Agent",
    "description": "To attach a knowledge base to an agent, send a POST request to `/v2/gen-ai/agents/{agent_uuid}/knowledge_bases/{knowledge_base_uuid}`",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for an agent.",
        "type": "string"
      },
      {
        "name": "knowledge_base_uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for a knowledge base.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{agent_uuid}/knowledge_bases/{knowledge_base_uuid}",
    "method": "DELETE",
    "operationId": "genai_detach_knowledge_base",
    "summary": "Detach Knowledge Base from an Agent",
    "description": "To detach a knowledge base from an agent, send a DELETE request to `/v2/gen-ai/agents/{agent_uuid}/knowledge_bases/{knowledge_base_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "agent_uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      },
      {
        "name": "knowledge_base_uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{parent_agent_uuid}/child_agents/{child_agent_uuid}",
    "method": "POST",
    "operationId": "genai_attach_agent",
    "summary": "Add Agent Route to an Agent",
    "description": "To add an agent route to an agent, send a POST request to `/v2/gen-ai/agents/{parent_agent_uuid}/child_agents/{child_agent_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "parent_agent_uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for the parent agent.",
        "type": "string"
      },
      {
        "name": "child_agent_uuid",
        "in": "path",
        "required": true,
        "description": "Routed agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{parent_agent_uuid}/child_agents/{child_agent_uuid}",
    "method": "PUT",
    "operationId": "genai_update_attached_agent",
    "summary": "Update Agent Route for an Agent",
    "description": "To update an agent route for an agent, send a PUT request to `/v2/gen-ai/agents/{parent_agent_uuid}/child_agents/{child_agent_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "parent_agent_uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for the parent agent.",
        "type": "string"
      },
      {
        "name": "child_agent_uuid",
        "in": "path",
        "required": true,
        "description": "Routed agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{parent_agent_uuid}/child_agents/{child_agent_uuid}",
    "method": "DELETE",
    "operationId": "genai_detach_agent",
    "summary": "Delete Agent Route for an Agent",
    "description": "To delete an agent route from a parent agent, send a DELETE request to `/v2/gen-ai/agents/{parent_agent_uuid}/child_agents/{child_agent_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "parent_agent_uuid",
        "in": "path",
        "required": true,
        "description": "Pagent agent id",
        "type": "string"
      },
      {
        "name": "child_agent_uuid",
        "in": "path",
        "required": true,
        "description": "Routed agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}",
    "method": "GET",
    "operationId": "genai_get_agent",
    "summary": "Retrieve an Existing Agent",
    "description": "To retrieve details of an agent, GET request to `/v2/gen-ai/agents/{uuid}`. The response body is a JSON object containing the agent.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Unique agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}",
    "method": "PUT",
    "operationId": "genai_update_agent",
    "summary": "Update an Agent",
    "description": "To update an agent, send a PUT request to `/v2/gen-ai/agents/{uuid}`. The response body is a JSON object containing the agent.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Unique agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_agent",
    "summary": "Delete an Agent",
    "description": "To delete an agent, send a DELETE request to `/v2/gen-ai/agents/{uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Unique agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}/child_agents",
    "method": "GET",
    "operationId": "genai_get_agent_children",
    "summary": "View Agent Routes",
    "description": "To view agent routes for an agent, send a GET requtest to `/v2/gen-ai/agents/{uuid}/child_agents`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Agent id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}/deployment_visibility",
    "method": "PUT",
    "operationId": "genai_update_agent_deployment_visibility",
    "summary": "Update Agent Status",
    "description": "Check whether an agent is public or private. To update the agent status, send a PUT request to `/v2/gen-ai/agents/{uuid}/deployment_visibility`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Unique id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}/versions",
    "method": "GET",
    "operationId": "genai_list_agent_versions",
    "summary": "List Agent Versions",
    "description": "To list all agent versions, send a GET request to `/v2/gen-ai/agents/{uuid}/versions`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Agent uuid",
        "type": "string"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/agents/{uuid}/versions",
    "method": "PUT",
    "operationId": "genai_rollback_to_agent_version",
    "summary": "Rollback to Agent Version",
    "description": "To update to a specific agent version, send a PUT request to `/v2/gen-ai/agents/{uuid}/versions`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Agent unique identifier",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/anthropic/keys",
    "method": "GET",
    "operationId": "genai_list_anthropic_api_keys",
    "summary": "List Anthropic API Keys",
    "description": "To list all Anthropic API keys, send a GET request to `/v2/gen-ai/anthropic/keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/anthropic/keys",
    "method": "POST",
    "operationId": "genai_create_anthropic_api_key",
    "summary": "Create Anthropic API Key",
    "description": "To create an Anthropic API key, send a POST request to `/v2/gen-ai/anthropic/keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/anthropic/keys/{api_key_uuid}",
    "method": "GET",
    "operationId": "genai_get_anthropic_api_key",
    "summary": "Get Anthropic API Key",
    "description": "To retrieve details of an Anthropic API key, send a GET request to `/v2/gen-ai/anthropic/keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/anthropic/keys/{api_key_uuid}",
    "method": "PUT",
    "operationId": "genai_update_anthropic_api_key",
    "summary": "Update Anthropic API Key",
    "description": "To update an Anthropic API key, send a PUT request to `/v2/gen-ai/anthropic/keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/anthropic/keys/{api_key_uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_anthropic_api_key",
    "summary": "Delete Anthropic API Key",
    "description": "To delete an Anthropic API key, send a DELETE request to `/v2/gen-ai/anthropic/keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/anthropic/keys/{uuid}/agents",
    "method": "GET",
    "operationId": "genai_list_agents_by_anthropic_key",
    "summary": "List agents by Anthropic key",
    "description": "List Agents by Anthropic Key.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Unique ID of Anthropic key",
        "type": "string"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/indexing_jobs",
    "method": "GET",
    "operationId": "genai_list_indexing_jobs",
    "summary": "List Indexing Jobs for a Knowledge Base",
    "description": "To list all indexing jobs for a knowledge base, send a GET request to `/v2/gen-ai/indexing_jobs`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/indexing_jobs",
    "method": "POST",
    "operationId": "genai_create_indexing_job",
    "summary": "Start Indexing Job for a Knowledge Base",
    "description": "To start an indexing job for a knowledge base, send a POST request to `/v2/gen-ai/indexing_jobs`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/indexing_jobs/{indexing_job_uuid}/data_sources",
    "method": "GET",
    "operationId": "genai_list_indexing_job_data_sources",
    "summary": "List Data Sources for Indexing Job for a Knowledge Base",
    "description": "To list all datasources for an indexing job, send a GET request to `/v2/gen-ai/indexing_jobs/{indexing_job_uuid}/data_sources`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "indexing_job_uuid",
        "in": "path",
        "required": true,
        "description": "Uuid of the indexing job",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/indexing_jobs/{uuid}",
    "method": "GET",
    "operationId": "genai_get_indexing_job",
    "summary": "Retrieve Status of Indexing Job for a Knowledge Base",
    "description": "To get status of an indexing Job for a knowledge base, send a GET request to `/v2/gen-ai/indexing_jobs/{uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Indexing job id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/indexing_jobs/{uuid}/cancel",
    "method": "PUT",
    "operationId": "genai_cancel_indexing_job",
    "summary": "Cancel Indexing Job for a Knowledge Base",
    "description": "To cancel an indexing job for a knowledge base, send a PUT request to `/v2/gen-ai/indexing_jobs/{uuid}/cancel`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "A unique identifier for an indexing job.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases",
    "method": "GET",
    "operationId": "genai_list_knowledge_bases",
    "summary": "List Knowledge Bases",
    "description": "To list all knowledge bases, send a GET request to `/v2/gen-ai/knowledge_bases`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases",
    "method": "POST",
    "operationId": "genai_create_knowledge_base",
    "summary": "Create a Knowledge Base",
    "description": "To create a knowledge base, send a POST request to `/v2/gen-ai/knowledge_bases`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources",
    "method": "GET",
    "operationId": "genai_list_knowledge_base_data_sources",
    "summary": "List Data Sources for a Knowledge Base",
    "description": "To list all data sources for a knowledge base, send a GET request to `/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "knowledge_base_uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources",
    "method": "POST",
    "operationId": "genai_create_knowledge_base_data_source",
    "summary": "Add Data Source to a Knowledge Base",
    "description": "To add a data source to a knowledge base, send a POST request to `/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "knowledge_base_uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources/{data_source_uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_knowledge_base_data_source",
    "summary": "Delete a Data Source from a Knowledge Base",
    "description": "To delete a data source from a knowledge base, send a DELETE request to `/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources/{data_source_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "knowledge_base_uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      },
      {
        "name": "data_source_uuid",
        "in": "path",
        "required": true,
        "description": "Data source id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases/{uuid}",
    "method": "GET",
    "operationId": "genai_get_knowledge_base",
    "summary": "Retrieve Information About an Existing Knowledge Base",
    "description": "To retrive information about an existing knowledge base, send a GET request to `/v2/gen-ai/knowledge_bases/{uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases/{uuid}",
    "method": "PUT",
    "operationId": "genai_update_knowledge_base",
    "summary": "Update a Knowledge Base",
    "description": "To update a knowledge base, send a PUT request to `/v2/gen-ai/knowledge_bases/{uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/knowledge_bases/{uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_knowledge_base",
    "summary": "Delete a Knowledge Base",
    "description": "To delete a knowledge base, send a DELETE request to `/v2/gen-ai/knowledge_bases/{uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Knowledge base id",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/models",
    "method": "GET",
    "operationId": "genai_list_models",
    "summary": "List Available Models",
    "description": "To list all models, send a GET request to `/v2/gen-ai/models`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "usecases",
        "in": "query",
        "required": false,
        "description": "Include only models defined for the listed usecases.\n\n - MODEL_USECASE_UNKNOWN: The use case of the model is unknown\n - MODEL_USECASE_AGENT: The model maybe used in an agent\n - MODEL_USECASE_FINETUNED: The model maybe used for fine tuning\n - MODEL_USECASE_KNOWLEDGEBASE: The model maybe used for knowledge bases (embedding models)\n - MODEL_USECASE_GUARDRAIL: The model maybe used for guardrails\n - MODEL_USECASE_REASONING: The model usecase for reasoning\n - MODEL_USECASE_SERVERLESS: The model usecase for serverless inference",
        "type": "array"
      },
      {
        "name": "public_only",
        "in": "query",
        "required": false,
        "description": "Only include models that are publicly available.",
        "type": "boolean"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/models/api_keys",
    "method": "GET",
    "operationId": "genai_list_model_api_keys",
    "summary": "List Model API Keys",
    "description": "To list all model API keys, send a GET request to `/v2/gen-ai/models/api_keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/models/api_keys",
    "method": "POST",
    "operationId": "genai_create_model_api_key",
    "summary": "Create a Model API Key",
    "description": "To create a model API key, send a POST request to `/v2/gen-ai/models/api_keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/models/api_keys/{api_key_uuid}",
    "method": "PUT",
    "operationId": "genai_update_model_api_key",
    "summary": "Update API Key for a Model",
    "description": "To update a model API key, send a PUT request to `/v2/gen-ai/models/api_keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/models/api_keys/{api_key_uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_model_api_key",
    "summary": "Delete API Key for a Model",
    "description": "To delete an API key for a model, send a DELETE request to `/v2/gen-ai/models/api_keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key for an agent.",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/models/api_keys/{api_key_uuid}/regenerate",
    "method": "PUT",
    "operationId": "genai_regenerate_model_api_key",
    "summary": "Regenerate API Key for a Model",
    "description": "To regenerate a model API key, send a PUT request to `/v2/gen-ai/models/api_keys/{api_key_uuid}/regenerate`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/openai/keys",
    "method": "GET",
    "operationId": "genai_list_openai_api_keys",
    "summary": "List OpenAI API Keys",
    "description": "To list all OpenAI API keys, send a GET request to `/v2/gen-ai/openai/keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/openai/keys",
    "method": "POST",
    "operationId": "genai_create_openai_api_key",
    "summary": "Create OpenAI API Key",
    "description": "To create an OpenAI API key, send a POST request to `/v2/gen-ai/openai/keys`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": []
  },
  {
    "path": "/v2/gen-ai/openai/keys/{api_key_uuid}",
    "method": "GET",
    "operationId": "genai_get_openai_api_key",
    "summary": "Get OpenAI API Key",
    "description": "To retrieve details of an OpenAI API key, send a GET request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/openai/keys/{api_key_uuid}",
    "method": "PUT",
    "operationId": "genai_update_openai_api_key",
    "summary": "Update OpenAI API Key",
    "description": "To update an OpenAI API key, send a PUT request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/openai/keys/{api_key_uuid}",
    "method": "DELETE",
    "operationId": "genai_delete_openai_api_key",
    "summary": "Delete OpenAI API Key",
    "description": "To delete an OpenAI API key, send a DELETE request to `/v2/gen-ai/openai/keys/{api_key_uuid}`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "api_key_uuid",
        "in": "path",
        "required": true,
        "description": "API key ID",
        "type": "string"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/openai/keys/{uuid}/agents",
    "method": "GET",
    "operationId": "genai_list_agents_by_openai_key",
    "summary": "List agents by OpenAI key",
    "description": "List Agents by OpenAI Key.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "uuid",
        "in": "path",
        "required": true,
        "description": "Unique ID of OpenAI key",
        "type": "string"
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number.",
        "type": "integer"
      },
      {
        "name": "per_page",
        "in": "query",
        "required": false,
        "description": "Items per page.",
        "type": "integer"
      }
    ]
  },
  {
    "path": "/v2/gen-ai/regions",
    "method": "GET",
    "operationId": "genai_list_datacenter_regions",
    "summary": "List Datacenter Regions",
    "description": "To list all datacenter regions, send a GET request to `/v2/gen-ai/regions`.",
    "tags": [
      "GenAI Platform (Public Preview)"
    ],
    "parameters": [
      {
        "name": "serves_inference",
        "in": "query",
        "required": false,
        "description": "Include datacenters that serve inference.",
        "type": "boolean"
      },
      {
        "name": "serves_batch",
        "in": "query",
        "required": false,
        "description": "Include datacenters that are capable of running batch jobs.",
        "type": "boolean"
      }
    ]
  }
]